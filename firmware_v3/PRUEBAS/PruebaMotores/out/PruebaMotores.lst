
PRUEBAS/PruebaMotores/out/PruebaMotores.elf:     file format elf32-littlearm
PRUEBAS/PruebaMotores/out/PruebaMotores.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000611

Program Header:
0x70000001 off    0x00012510 vaddr 0x1a002510 paddr 0x1a002510 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000128 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002518 memsz 0x00002518 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002518 align 2**16
         filesz 0x000000d0 memsz 0x000000d0 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000250c  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  10000000  1a002518  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200d0  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200d0  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200d0  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200d0  2**2
                  CONTENTS
  6 .bss          00000058  100000d0  100000d0  000000d0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200d0  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200d0  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200d0  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200d0  2**2
                  CONTENTS
 11 .init_array   00000004  1a00250c  1a00250c  0001250c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a002510  1a002510  00012510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200d0  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200d0  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200d0  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200d0  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200d0  2**2
                  CONTENTS
 18 .noinit       00000000  10000128  10000128  000200d0  2**2
                  CONTENTS
 19 .debug_info   00021813  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00004ca4  00000000  00000000  000418e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000091a2  00000000  00000000  00046587  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000b38  00000000  00000000  0004f729  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00000c08  00000000  00000000  00050261  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000d750  00000000  00000000  00050e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   00012597  00000000  00000000  0005e5b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0002a289  00000000  00000000  00070b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      00000068  00000000  00000000  0009add9  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  0009ae41  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001c9c  00000000  00000000  0009ae74  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000d0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a00250c l    d  .init_array	00000000 .init_array
1a002510 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000128 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0019cc l     F .text	000000c8 uartProcessIRQ
100000ec l     O .bss	00000004 rxIsrCallbackUART0
100000f0 l     O .bss	00000004 rxIsrCallbackUART0Params
100000f4 l     O .bss	00000004 rxIsrCallbackUART2
100000f8 l     O .bss	00000004 rxIsrCallbackUART2Params
100000fc l     O .bss	00000004 rxIsrCallbackUART3
10000100 l     O .bss	00000004 rxIsrCallbackUART3Params
10000104 l     O .bss	00000004 txIsrCallbackUART0
10000108 l     O .bss	00000004 txIsrCallbackUART0Params
1000010c l     O .bss	00000004 txIsrCallbackUART2
10000110 l     O .bss	00000004 txIsrCallbackUART2Params
10000114 l     O .bss	00000004 txIsrCallbackUART3
10000118 l     O .bss	00000004 txIsrCallbackUART3Params
1a0024b8 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 PruebaMotores.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a002228 l     O .text	00000004 InitClkStates
1a00222c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a00074c l     F .text	00000044 Board_LED_Init
1a000790 l     F .text	00000040 Board_TEC_Init
1a0007d0 l     F .text	00000040 Board_GPIO_Init
1a000810 l     F .text	00000030 Board_ADC_Init
1a000840 l     F .text	00000038 Board_SPI_Init
1a000878 l     F .text	00000024 Board_I2C_Init
1a0022a4 l     O .text	00000008 GpioButtons
1a0022ac l     O .text	0000000c GpioLeds
1a0022b8 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0008f8 l     F .text	00000014 Chip_SSP_GetClockIndex
1a00090c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0022d0 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 timer_18xx_43xx.c
1a000b84 l     F .text	0000002c Chip_TIMER_GetClockIndex
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000bd4 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000be8 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000cb0 l     F .text	000000a0 pll_calc_divs
1a000d50 l     F .text	0000010c pll_get_frac
1a000e5c l     F .text	0000004c Chip_Clock_FindBaseClock
1a0010d0 l     F .text	00000022 Chip_Clock_GetDivRate
100000d0 l     O .bss	00000008 audio_usb_pll_freq
1a002324 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a00123c l     F .text	0000002c Chip_UART_GetIndex
1a002390 l     O .text	00000008 UART_BClock
1a002398 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0013ec l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_timer.c
1a001636 l     F .text	00000002 errorOcurred
1a001638 l     F .text	00000002 doNothing
1000003c l     O .data	00000040 timer_dd
1a002488 l     O .text	00000030 timer_sd
00000000 l    df *ABS*	00000000 sapi_tick.c
100000d8 l     O .bss	00000004 callBackFuncParams
100000e0 l     O .bss	00000008 tickCounter
100000e8 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1000011c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_servo.c
10000088 l     O .data	00000048 AttachedServoList
1a002500 l     O .text	00000009 servoMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a002510 l       .init_array	00000000 __init_array_end
1a00250c l       .bss_RAM5	00000000 __preinit_array_end
1a00250c l       .init_array	00000000 __init_array_start
1a00250c l       .bss_RAM5	00000000 __preinit_array_start
1a000ef4 g     F .text	0000001c Chip_Clock_GetDividerSource
1a001878 g     F .text	00000044 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000300 g     F .text	00000034 MotorInit
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a0008f0 g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000c8e g     F .text	0000000c Chip_ADC_SetResolution
1a001e88 g     F .text	0000001c servoRead
1a0019a0 g     F .text	0000002c SysTick_Handler
1a001e64 g     F .text	00000024 servoInit
1a00060e  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a001be0 g     F .text	0000001c timer2CompareMatch2func
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002518 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff727e g       *ABS*	00000000 __valid_user_code_checksum
1a002518 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0018bc g     F .text	00000044 TIMER3_IRQHandler
1a001172 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a001ddc g     F .text	00000058 servoAttach
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a000bbc g     F .text	00000018 Chip_TIMER_Reset
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a001ecc g     F .text	00000000 .hidden __aeabi_uldivmod
10000128 g       .noinit	00000000 _noinit
10000120 g     O .bss	00000004 SystemCoreClock
1a001268 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a0011f0 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a001c50 g     F .text	0000001c timer3CompareMatch3func
1a0006d4 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001e34 g     F .text	00000030 servoDetach
1a001efc g     F .text	000002d0 .hidden __udivmoddi4
1a0022a0 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a001b70 g     F .text	0000001c timer1CompareMatch1func
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a002510 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a0021d0 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a0008c0 g     F .text	00000030 Board_Init
1a00069a  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a001ba8 g     F .text	0000001c timer1CompareMatch3func
1a001db4 g     F .text	00000028 servoIsAttached
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000128 g       .bss	00000000 _ebss
1a0017f8 g     F .text	00000040 TIMER0_IRQHandler
1a000610 g     F .text	00000088 Reset_Handler
1a001924 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a001bc4 g     F .text	0000001c timer2CompareMatch1func
1a0009f0 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a00044a g     F .text	00000076 TwoMotorRun
1a000ea8 g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a001838 g     F .text	00000040 TIMER1_IRQHandler
1a0009cc g     F .text	00000024 Chip_I2C_Init
1a0003f8 g     F .text	00000052 MotorRun
1a001a94 g     F .text	0000000a UART2_IRQHandler
1a001064 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0023a0 g     O .text	000000e6 gpioPinsInit
1a000924 g     F .text	00000012 Chip_SSP_SetClockRate
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a00163c g     F .text	00000120 Timer_Init
1a00175c g     F .text	00000008 Timer_microsecondsToTicks
1a00114c g     F .text	00000026 Chip_Clock_GetBaseClock
1a001d6c g     F .text	00000048 servoInitTimers
100000d0 g       .bss	00000000 _bss
1a000c5c g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a000936 g     F .text	0000003e Chip_SSP_SetBitRate
1a000b80 g     F .text	00000002 Chip_GPIO_Init
1a0022cc g     O .text	00000004 OscRateIn
1a001c88 g     F .text	0000004c timer1CompareMatch0func
10000128 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000bb0 g     F .text	0000000c Chip_TIMER_Init
1a000178 g       .text	00000000 __bss_section_table_end
1a001420 g     F .text	000001ac gpioInit
1a00037e g     F .text	0000007a TwoMotorStep
1a0021cc  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001aa8 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a00179c g     F .text	00000044 Timer_DisableCompareMatch
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a000f10 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002218 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a0004c0 g     F .text	0000014e main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a001764 g     F .text	00000038 Timer_EnableCompareMatch
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001180 g     F .text	0000003c Chip_Clock_EnableOpts
1a000334 g     F .text	0000004a MotorStep
1a001ea4 g     F .text	00000028 servoWrite
1a000f2c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000fe4 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001398 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a001b38 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0015cc g     F .text	0000006a gpioWrite
1a000698  w    F .text	00000002 _fini
1a000c1c g     F .text	00000040 Chip_ADC_Init
10000124 g     O .bss	00000004 g_pUsbApi
1a00069c g     F .text	00000038 Board_SetupMuxing
1a0012bc g     F .text	000000dc Chip_UART_SetBaudFDR
1a001900 g     F .text	0000000c tickRead
10000080 g     O .data	00000008 tickRateMS
1a001c34 g     F .text	0000001c timer3CompareMatch2func
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1b000000 g       .text	00000000 __core_m0app_START__
1a001c6c g     F .text	0000001c valueToMicroseconds
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000128 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a000974 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a00089c g     F .text	00000024 Board_Debug_Init
100000d0 g       .data	00000000 _edata
1a001bfc g     F .text	0000001c timer2CompareMatch3func
1a0009ac g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a000a28 g     F .text	00000158 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a000c9c g     F .text	00000014 SystemCoreClockUpdate
1a001c18 g     F .text	0000001c timer3CompareMatch1func
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a0021cc  w    F .text	00000002 .hidden __aeabi_idiv0
1a001cd4 g     F .text	0000004c timer2CompareMatch0func
1a00017e  w    F .text	00000002 BusFault_Handler
1a0011bc g     F .text	00000034 Chip_Clock_Enable
1a001a9e g     F .text	0000000a UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a001ac4 g     F .text	00000074 boardInit
1a001d20 g     F .text	0000004c timer3CompareMatch0func
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a0017e0 g     F .text	00000018 Timer_SetCompareMatch
1a001b8c g     F .text	0000001c timer1CompareMatch2func
1a00190c g     F .text	00000018 tickPowerSet
1a0010f4 g     F .text	00000058 Chip_Clock_SetBaseClock
1a0013d0 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a000740 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 11 06 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 7e 72 ff 53     }...........~r.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	a1 19 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	a9 1a 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	f9 17 00 1a 39 18 00 1a 79 18 00 1a bd 18 00 1a     ....9...y.......
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 95 1a 00 1a 9f 1a 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a002518 	.word	0x1a002518
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000d0 	.word	0x000000d0
1a000120:	1a002518 	.word	0x1a002518
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002518 	.word	0x1a002518
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002518 	.word	0x1a002518
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002518 	.word	0x1a002518
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000d0 	.word	0x100000d0
1a000154:	00000058 	.word	0x00000058
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f001 fc04 	bl	1a0019cc <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x1a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <MotorInit>:
   int STEP;
} MotorPins_t;
   

// Funcion de inicializacion de los motores
void MotorInit(MotorPins_t motor, int enPin, int dirPin, int stepPin) {
1a000300:	b510      	push	{r4, lr}
1a000302:	b084      	sub	sp, #16
1a000304:	ac04      	add	r4, sp, #16
1a000306:	e904 0007 	stmdb	r4, {r0, r1, r2}
   
   motor.EN = enPin;
   motor.DIR = dirPin;
   motor.STEP = stepPin;
   
   gpioConfig(motor.EN, GPIO_OUTPUT);
1a00030a:	b25c      	sxtb	r4, r3
1a00030c:	2101      	movs	r1, #1
1a00030e:	4620      	mov	r0, r4
1a000310:	f001 f886 	bl	1a001420 <gpioInit>
   gpioConfig(motor.DIR, GPIO_OUTPUT);
1a000314:	2101      	movs	r1, #1
1a000316:	f99d 0018 	ldrsb.w	r0, [sp, #24]
1a00031a:	f001 f881 	bl	1a001420 <gpioInit>
   gpioConfig(motor.STEP, GPIO_OUTPUT);
1a00031e:	2101      	movs	r1, #1
1a000320:	f99d 001c 	ldrsb.w	r0, [sp, #28]
1a000324:	f001 f87c 	bl	1a001420 <gpioInit>
   
   
   gpioWrite(motor.EN, ON);
1a000328:	2101      	movs	r1, #1
1a00032a:	4620      	mov	r0, r4
1a00032c:	f001 f94e 	bl	1a0015cc <gpioWrite>
   
}
1a000330:	b004      	add	sp, #16
1a000332:	bd10      	pop	{r4, pc}

1a000334 <MotorStep>:

// Funcion para realizar un paso en un motor
void MotorStep(MotorPins_t motor, bool direction) {
1a000334:	b510      	push	{r4, lr}
1a000336:	b084      	sub	sp, #16
1a000338:	ac04      	add	r4, sp, #16
1a00033a:	e904 0007 	stmdb	r4, {r0, r1, r2}
    // Configurar la direcci�n del motor
    if (direction) {
1a00033e:	b1c3      	cbz	r3, 1a000372 <MotorStep+0x3e>
        gpioWrite(motor.DIR, ON);  // Sentido horario
1a000340:	2101      	movs	r1, #1
1a000342:	f99d 0008 	ldrsb.w	r0, [sp, #8]
1a000346:	f001 f941 	bl	1a0015cc <gpioWrite>
    } else {
        gpioWrite(motor.DIR, OFF);   // Sentido antihorario
    }
    
    // Generar un pulso en el pin STEP
    gpioWrite(motor.STEP, ON);  // Enviar pulso alto
1a00034a:	f99d 400c 	ldrsb.w	r4, [sp, #12]
1a00034e:	2101      	movs	r1, #1
1a000350:	4620      	mov	r0, r4
1a000352:	f001 f93b 	bl	1a0015cc <gpioWrite>
    delay(1);
1a000356:	2001      	movs	r0, #1
1a000358:	2100      	movs	r1, #0
1a00035a:	f001 fbed 	bl	1a001b38 <delay>
    gpioWrite(motor.STEP, OFF);   // Enviar pulso bajo
1a00035e:	2100      	movs	r1, #0
1a000360:	4620      	mov	r0, r4
1a000362:	f001 f933 	bl	1a0015cc <gpioWrite>
    delay(1);
1a000366:	2001      	movs	r0, #1
1a000368:	2100      	movs	r1, #0
1a00036a:	f001 fbe5 	bl	1a001b38 <delay>
}
1a00036e:	b004      	add	sp, #16
1a000370:	bd10      	pop	{r4, pc}
        gpioWrite(motor.DIR, OFF);   // Sentido antihorario
1a000372:	2100      	movs	r1, #0
1a000374:	f99d 0008 	ldrsb.w	r0, [sp, #8]
1a000378:	f001 f928 	bl	1a0015cc <gpioWrite>
1a00037c:	e7e5      	b.n	1a00034a <MotorStep+0x16>

1a00037e <TwoMotorStep>:

//Funcion para realizar un paso en dos motores en simultaneo
void TwoMotorStep(MotorPins_t motor1, bool direction1, MotorPins_t motor2, bool direction2) {
1a00037e:	b530      	push	{r4, r5, lr}
1a000380:	b085      	sub	sp, #20
1a000382:	ac04      	add	r4, sp, #16
1a000384:	e904 0007 	stmdb	r4, {r0, r1, r2}
1a000388:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    // Configurar la direcci�n del motor
    if (direction1) {
1a00038c:	b343      	cbz	r3, 1a0003e0 <TwoMotorStep+0x62>
        gpioWrite(motor1.DIR, ON);  // Sentido horario
1a00038e:	2101      	movs	r1, #1
1a000390:	f99d 0008 	ldrsb.w	r0, [sp, #8]
1a000394:	f001 f91a 	bl	1a0015cc <gpioWrite>
    } else {
        gpioWrite(motor1.DIR, OFF);   // Sentido antihorario
    }
    if (direction2) {
1a000398:	b344      	cbz	r4, 1a0003ec <TwoMotorStep+0x6e>
        gpioWrite(motor2.DIR, ON);  // Sentido horario
1a00039a:	2101      	movs	r1, #1
1a00039c:	f99d 0024 	ldrsb.w	r0, [sp, #36]	; 0x24
1a0003a0:	f001 f914 	bl	1a0015cc <gpioWrite>
    } else {
        gpioWrite(motor2.DIR, OFF);   // Sentido antihorario
    }
    
    // Generar un pulso en el pin STEP
    gpioWrite(motor1.STEP, ON);  // Enviar pulso alto
1a0003a4:	f99d 500c 	ldrsb.w	r5, [sp, #12]
1a0003a8:	2101      	movs	r1, #1
1a0003aa:	4628      	mov	r0, r5
1a0003ac:	f001 f90e 	bl	1a0015cc <gpioWrite>
    gpioWrite(motor2.STEP, ON);  // Enviar pulso alto
1a0003b0:	f99d 4028 	ldrsb.w	r4, [sp, #40]	; 0x28
1a0003b4:	2101      	movs	r1, #1
1a0003b6:	4620      	mov	r0, r4
1a0003b8:	f001 f908 	bl	1a0015cc <gpioWrite>
    delay(1);
1a0003bc:	2001      	movs	r0, #1
1a0003be:	2100      	movs	r1, #0
1a0003c0:	f001 fbba 	bl	1a001b38 <delay>
    gpioWrite(motor1.STEP, OFF);   // Enviar pulso bajo
1a0003c4:	2100      	movs	r1, #0
1a0003c6:	4628      	mov	r0, r5
1a0003c8:	f001 f900 	bl	1a0015cc <gpioWrite>
    gpioWrite(motor2.STEP, OFF);   // Enviar pulso bajo
1a0003cc:	2100      	movs	r1, #0
1a0003ce:	4620      	mov	r0, r4
1a0003d0:	f001 f8fc 	bl	1a0015cc <gpioWrite>
    delay(1);
1a0003d4:	2001      	movs	r0, #1
1a0003d6:	2100      	movs	r1, #0
1a0003d8:	f001 fbae 	bl	1a001b38 <delay>
}
1a0003dc:	b005      	add	sp, #20
1a0003de:	bd30      	pop	{r4, r5, pc}
        gpioWrite(motor1.DIR, OFF);   // Sentido antihorario
1a0003e0:	2100      	movs	r1, #0
1a0003e2:	f99d 0008 	ldrsb.w	r0, [sp, #8]
1a0003e6:	f001 f8f1 	bl	1a0015cc <gpioWrite>
1a0003ea:	e7d5      	b.n	1a000398 <TwoMotorStep+0x1a>
        gpioWrite(motor2.DIR, OFF);   // Sentido antihorario
1a0003ec:	2100      	movs	r1, #0
1a0003ee:	f99d 0024 	ldrsb.w	r0, [sp, #36]	; 0x24
1a0003f2:	f001 f8eb 	bl	1a0015cc <gpioWrite>
1a0003f6:	e7d5      	b.n	1a0003a4 <TwoMotorStep+0x26>

1a0003f8 <MotorRun>:

// Funcion para realizar varios pasos en un motor
void MotorRun(MotorPins_t motor, bool direction, int stepCount, int velocity){
1a0003f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0003fc:	b084      	sub	sp, #16
1a0003fe:	ac04      	add	r4, sp, #16
1a000400:	e904 0007 	stmdb	r4, {r0, r1, r2}
1a000404:	461f      	mov	r7, r3
1a000406:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a000408:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   gpioWrite(motor.EN, OFF);
1a00040a:	f99d 8004 	ldrsb.w	r8, [sp, #4]
1a00040e:	2100      	movs	r1, #0
1a000410:	4640      	mov	r0, r8
1a000412:	f001 f8db 	bl	1a0015cc <gpioWrite>
   delay(1);
1a000416:	2001      	movs	r0, #1
1a000418:	2100      	movs	r1, #0
1a00041a:	f001 fb8d 	bl	1a001b38 <delay>
   for (int i = 0; i < stepCount; i++) {
1a00041e:	2400      	movs	r4, #0
1a000420:	42ac      	cmp	r4, r5
1a000422:	da0b      	bge.n	1a00043c <MotorRun+0x44>
      MotorStep(motor, direction);
1a000424:	463b      	mov	r3, r7
1a000426:	aa04      	add	r2, sp, #16
1a000428:	e912 0007 	ldmdb	r2, {r0, r1, r2}
1a00042c:	f7ff ff82 	bl	1a000334 <MotorStep>
      delay(velocity);
1a000430:	4630      	mov	r0, r6
1a000432:	17f1      	asrs	r1, r6, #31
1a000434:	f001 fb80 	bl	1a001b38 <delay>
   for (int i = 0; i < stepCount; i++) {
1a000438:	3401      	adds	r4, #1
1a00043a:	e7f1      	b.n	1a000420 <MotorRun+0x28>
   }
   gpioWrite(motor.EN, ON);
1a00043c:	2101      	movs	r1, #1
1a00043e:	4640      	mov	r0, r8
1a000440:	f001 f8c4 	bl	1a0015cc <gpioWrite>
}
1a000444:	b004      	add	sp, #16
1a000446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a00044a <TwoMotorRun>:

// Funcion para realizar varios pasos en dos motores en simultaneo
void TwoMotorRun(MotorPins_t motor1, bool direction1, MotorPins_t motor2, bool direction2, int stepCount, int velocity){
1a00044a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00044e:	b088      	sub	sp, #32
1a000450:	ac08      	add	r4, sp, #32
1a000452:	e904 0007 	stmdb	r4, {r0, r1, r2}
1a000456:	4698      	mov	r8, r3
1a000458:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
1a00045c:	9d14      	ldr	r5, [sp, #80]	; 0x50
1a00045e:	9e15      	ldr	r6, [sp, #84]	; 0x54
   gpioWrite(motor1.EN, OFF);
1a000460:	f99d a014 	ldrsb.w	sl, [sp, #20]
1a000464:	2100      	movs	r1, #0
1a000466:	4650      	mov	r0, sl
1a000468:	f001 f8b0 	bl	1a0015cc <gpioWrite>
   gpioWrite(motor2.EN, OFF);
1a00046c:	f99d 9040 	ldrsb.w	r9, [sp, #64]	; 0x40
1a000470:	2100      	movs	r1, #0
1a000472:	4648      	mov	r0, r9
1a000474:	f001 f8aa 	bl	1a0015cc <gpioWrite>
   delay(1);
1a000478:	2001      	movs	r0, #1
1a00047a:	2100      	movs	r1, #0
1a00047c:	f001 fb5c 	bl	1a001b38 <delay>
   for (int i = 0; i < stepCount; i++) {
1a000480:	2400      	movs	r4, #0
1a000482:	42ac      	cmp	r4, r5
1a000484:	da11      	bge.n	1a0004aa <TwoMotorRun+0x60>
      TwoMotorStep(motor1, direction1, motor2, direction2);
1a000486:	9703      	str	r7, [sp, #12]
1a000488:	ab10      	add	r3, sp, #64	; 0x40
1a00048a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
1a00048e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
1a000492:	4643      	mov	r3, r8
1a000494:	aa08      	add	r2, sp, #32
1a000496:	e912 0007 	ldmdb	r2, {r0, r1, r2}
1a00049a:	f7ff ff70 	bl	1a00037e <TwoMotorStep>
      delay(velocity);
1a00049e:	4630      	mov	r0, r6
1a0004a0:	17f1      	asrs	r1, r6, #31
1a0004a2:	f001 fb49 	bl	1a001b38 <delay>
   for (int i = 0; i < stepCount; i++) {
1a0004a6:	3401      	adds	r4, #1
1a0004a8:	e7eb      	b.n	1a000482 <TwoMotorRun+0x38>
   }
   gpioWrite(motor1.EN, ON);
1a0004aa:	2101      	movs	r1, #1
1a0004ac:	4650      	mov	r0, sl
1a0004ae:	f001 f88d 	bl	1a0015cc <gpioWrite>
   gpioWrite(motor2.EN, ON);
1a0004b2:	2101      	movs	r1, #1
1a0004b4:	4648      	mov	r0, r9
1a0004b6:	f001 f889 	bl	1a0015cc <gpioWrite>
}
1a0004ba:	b008      	add	sp, #32
1a0004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

1a0004c0 <main>:
   MoveY(motor1, motor2, UP, side2, velocity);
}
 

// Funcion principal del programa
int main(void) {
1a0004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0004c2:	b08d      	sub	sp, #52	; 0x34
   boardConfig();
1a0004c4:	f001 fafe 	bl	1a001ac4 <boardInit>
   bool_t valor = 0;

   uint8_t servoAngle = 0; // 0 a 180 grados

   // Configurar Servo
   valor = servoConfig( 0, SERVO_ENABLE );
1a0004c8:	2100      	movs	r1, #0
1a0004ca:	4608      	mov	r0, r1
1a0004cc:	f001 fcca 	bl	1a001e64 <servoInit>

   valor = servoConfig( SERVO_N, SERVO_ENABLE_OUTPUT );
1a0004d0:	2102      	movs	r1, #2
1a0004d2:	2003      	movs	r0, #3
1a0004d4:	f001 fcc6 	bl	1a001e64 <servoInit>

   // Usar Servo
   valor = servoWrite( SERVO_N, servoAngle );
1a0004d8:	2100      	movs	r1, #0
1a0004da:	2003      	movs	r0, #3
1a0004dc:	f001 fce2 	bl	1a001ea4 <servoWrite>
   servoAngle = servoRead( SERVO_N );
1a0004e0:	2003      	movs	r0, #3
1a0004e2:	f001 fcd1 	bl	1a001e88 <servoRead>
   
   MotorPins_t motor1;
   MotorInit(motor1, EN_PIN1, DIR_PIN1, STEP_PIN1);
1a0004e6:	230c      	movs	r3, #12
1a0004e8:	9301      	str	r3, [sp, #4]
1a0004ea:	230b      	movs	r3, #11
1a0004ec:	9300      	str	r3, [sp, #0]
1a0004ee:	230d      	movs	r3, #13
1a0004f0:	aa0c      	add	r2, sp, #48	; 0x30
1a0004f2:	e912 0007 	ldmdb	r2, {r0, r1, r2}
1a0004f6:	f7ff ff03 	bl	1a000300 <MotorInit>
   
   MotorPins_t motor2;
   MotorInit(motor2, EN_PIN2, DIR_PIN2, STEP_PIN2);
1a0004fa:	230f      	movs	r3, #15
1a0004fc:	9301      	str	r3, [sp, #4]
1a0004fe:	230e      	movs	r3, #14
1a000500:	9300      	str	r3, [sp, #0]
1a000502:	2310      	movs	r3, #16
1a000504:	aa06      	add	r2, sp, #24
1a000506:	ca07      	ldmia	r2, {r0, r1, r2}
1a000508:	f7ff fefa 	bl	1a000300 <MotorInit>
   
    // Bucle infinito para controlar el motor
    while (1) {
      /* Prendo el led azul */
      gpioWrite( LEDB, ON );
1a00050c:	2101      	movs	r1, #1
1a00050e:	202a      	movs	r0, #42	; 0x2a
1a000510:	f001 f85c 	bl	1a0015cc <gpioWrite>

      delay(500);
1a000514:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000518:	2100      	movs	r1, #0
1a00051a:	f001 fb0d 	bl	1a001b38 <delay>

      /* Apago el led azul */
      gpioWrite( LEDB, OFF );
1a00051e:	2100      	movs	r1, #0
1a000520:	202a      	movs	r0, #42	; 0x2a
1a000522:	f001 f853 	bl	1a0015cc <gpioWrite>

      delay(500);
1a000526:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00052a:	2100      	movs	r1, #0
1a00052c:	f001 fb04 	bl	1a001b38 <delay>

      gpioWrite( LEDR, ON );
1a000530:	2101      	movs	r1, #1
1a000532:	2028      	movs	r0, #40	; 0x28
1a000534:	f001 f84a 	bl	1a0015cc <gpioWrite>
      // Realizar 200 pasos en sentido horario motor 1
      MotorRun(motor1, H, 200, 5);
1a000538:	2705      	movs	r7, #5
1a00053a:	9701      	str	r7, [sp, #4]
1a00053c:	26c8      	movs	r6, #200	; 0xc8
1a00053e:	9600      	str	r6, [sp, #0]
1a000540:	2301      	movs	r3, #1
1a000542:	ac09      	add	r4, sp, #36	; 0x24
1a000544:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
1a000548:	f7ff ff56 	bl	1a0003f8 <MotorRun>
      gpioWrite( LEDR, OFF );
1a00054c:	2100      	movs	r1, #0
1a00054e:	2028      	movs	r0, #40	; 0x28
1a000550:	f001 f83c 	bl	1a0015cc <gpioWrite>

      // Pausa antes de cambiar de direcci�n
      delay(1000);
1a000554:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000558:	2100      	movs	r1, #0
1a00055a:	f001 faed 	bl	1a001b38 <delay>

      gpioWrite( LEDG, ON );
1a00055e:	2101      	movs	r1, #1
1a000560:	2029      	movs	r0, #41	; 0x29
1a000562:	f001 f833 	bl	1a0015cc <gpioWrite>
      // Realizar 200 pasos en sentido horario motor 2
      MotorRun(motor2, H, 200, 5);
1a000566:	9701      	str	r7, [sp, #4]
1a000568:	9600      	str	r6, [sp, #0]
1a00056a:	2301      	movs	r3, #1
1a00056c:	ad06      	add	r5, sp, #24
1a00056e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
1a000572:	f7ff ff41 	bl	1a0003f8 <MotorRun>
      gpioWrite( LEDG, OFF );
1a000576:	2100      	movs	r1, #0
1a000578:	2029      	movs	r0, #41	; 0x29
1a00057a:	f001 f827 	bl	1a0015cc <gpioWrite>

      // Pausa antes de repetir el ciclo
      delay(1000);
1a00057e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000582:	2100      	movs	r1, #0
1a000584:	f001 fad8 	bl	1a001b38 <delay>

      gpioWrite( LEDR, ON );
1a000588:	2101      	movs	r1, #1
1a00058a:	2028      	movs	r0, #40	; 0x28
1a00058c:	f001 f81e 	bl	1a0015cc <gpioWrite>
      // Realizar 200 pasos en sentido antihorario motor 1
      MotorRun(motor1, AH, 200, 5);
1a000590:	9701      	str	r7, [sp, #4]
1a000592:	9600      	str	r6, [sp, #0]
1a000594:	2300      	movs	r3, #0
1a000596:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
1a00059a:	f7ff ff2d 	bl	1a0003f8 <MotorRun>
      gpioWrite( LEDR, OFF );
1a00059e:	2100      	movs	r1, #0
1a0005a0:	2028      	movs	r0, #40	; 0x28
1a0005a2:	f001 f813 	bl	1a0015cc <gpioWrite>

      // Pausa antes de cambiar de direcci�n
      delay(1000);
1a0005a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a0005aa:	2100      	movs	r1, #0
1a0005ac:	f001 fac4 	bl	1a001b38 <delay>

      gpioWrite( LEDG, ON );
1a0005b0:	2101      	movs	r1, #1
1a0005b2:	2029      	movs	r0, #41	; 0x29
1a0005b4:	f001 f80a 	bl	1a0015cc <gpioWrite>
      // Realizar 200 pasos en sentido antihorario motor 2
      MotorRun(motor2, AH, 200, 5);
1a0005b8:	9701      	str	r7, [sp, #4]
1a0005ba:	9600      	str	r6, [sp, #0]
1a0005bc:	2300      	movs	r3, #0
1a0005be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
1a0005c2:	f7ff ff19 	bl	1a0003f8 <MotorRun>
      gpioWrite( LEDG, OFF );
1a0005c6:	2100      	movs	r1, #0
1a0005c8:	2029      	movs	r0, #41	; 0x29
1a0005ca:	f000 ffff 	bl	1a0015cc <gpioWrite>

      // Pausa antes de repetir el ciclo
      delay(1000);
1a0005ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a0005d2:	2100      	movs	r1, #0
1a0005d4:	f001 fab0 	bl	1a001b38 <delay>

      gpioWrite( LED1, ON );
1a0005d8:	2101      	movs	r1, #1
1a0005da:	202b      	movs	r0, #43	; 0x2b
1a0005dc:	f000 fff6 	bl	1a0015cc <gpioWrite>
      TwoMotorRun(motor1, AH, motor2, H, 200, 5);
1a0005e0:	9705      	str	r7, [sp, #20]
1a0005e2:	9604      	str	r6, [sp, #16]
1a0005e4:	2301      	movs	r3, #1
1a0005e6:	9303      	str	r3, [sp, #12]
1a0005e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
1a0005ec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
1a0005f0:	2300      	movs	r3, #0
1a0005f2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
1a0005f6:	f7ff ff28 	bl	1a00044a <TwoMotorRun>
      gpioWrite( LED1, OFF );
1a0005fa:	2100      	movs	r1, #0
1a0005fc:	202b      	movs	r0, #43	; 0x2b
1a0005fe:	f000 ffe5 	bl	1a0015cc <gpioWrite>

      delay(1000);
1a000602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000606:	2100      	movs	r1, #0
1a000608:	f001 fa96 	bl	1a001b38 <delay>
1a00060c:	e77e      	b.n	1a00050c <main+0x4c>

1a00060e <initialise_monitor_handles>:
}
1a00060e:	4770      	bx	lr

1a000610 <Reset_Handler>:
void Reset_Handler(void) {
1a000610:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000612:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000614:	4b19      	ldr	r3, [pc, #100]	; (1a00067c <Reset_Handler+0x6c>)
1a000616:	4a1a      	ldr	r2, [pc, #104]	; (1a000680 <Reset_Handler+0x70>)
1a000618:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a00061a:	3304      	adds	r3, #4
1a00061c:	4a19      	ldr	r2, [pc, #100]	; (1a000684 <Reset_Handler+0x74>)
1a00061e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000620:	2300      	movs	r3, #0
1a000622:	e005      	b.n	1a000630 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000624:	4a18      	ldr	r2, [pc, #96]	; (1a000688 <Reset_Handler+0x78>)
1a000626:	f04f 31ff 	mov.w	r1, #4294967295
1a00062a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00062e:	3301      	adds	r3, #1
1a000630:	2b07      	cmp	r3, #7
1a000632:	d9f7      	bls.n	1a000624 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000634:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000636:	4b15      	ldr	r3, [pc, #84]	; (1a00068c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000638:	e007      	b.n	1a00064a <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a00063a:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00063e:	689a      	ldr	r2, [r3, #8]
1a000640:	6859      	ldr	r1, [r3, #4]
1a000642:	6818      	ldr	r0, [r3, #0]
1a000644:	f7ff fda1 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000648:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a00064a:	4a11      	ldr	r2, [pc, #68]	; (1a000690 <Reset_Handler+0x80>)
1a00064c:	4293      	cmp	r3, r2
1a00064e:	d3f4      	bcc.n	1a00063a <Reset_Handler+0x2a>
1a000650:	e006      	b.n	1a000660 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000652:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000654:	6859      	ldr	r1, [r3, #4]
1a000656:	f854 0b08 	ldr.w	r0, [r4], #8
1a00065a:	f7ff fda5 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00065e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000660:	4a0c      	ldr	r2, [pc, #48]	; (1a000694 <Reset_Handler+0x84>)
1a000662:	4293      	cmp	r3, r2
1a000664:	d3f5      	bcc.n	1a000652 <Reset_Handler+0x42>
    SystemInit();
1a000666:	f000 fe97 	bl	1a001398 <SystemInit>
    __libc_init_array();
1a00066a:	f001 fdb1 	bl	1a0021d0 <__libc_init_array>
    initialise_monitor_handles();
1a00066e:	f7ff ffce 	bl	1a00060e <initialise_monitor_handles>
    main();
1a000672:	f7ff ff25 	bl	1a0004c0 <main>
        __asm__ volatile("wfi");
1a000676:	bf30      	wfi
1a000678:	e7fd      	b.n	1a000676 <Reset_Handler+0x66>
1a00067a:	bf00      	nop
1a00067c:	40053100 	.word	0x40053100
1a000680:	10df1000 	.word	0x10df1000
1a000684:	01dff7ff 	.word	0x01dff7ff
1a000688:	e000e280 	.word	0xe000e280
1a00068c:	1a000114 	.word	0x1a000114
1a000690:	1a000150 	.word	0x1a000150
1a000694:	1a000178 	.word	0x1a000178

1a000698 <_fini>:
void _fini(void) {}
1a000698:	4770      	bx	lr

1a00069a <_init>:
void _init(void) {}
1a00069a:	4770      	bx	lr

1a00069c <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00069c:	2300      	movs	r3, #0
1a00069e:	2b1c      	cmp	r3, #28
1a0006a0:	d812      	bhi.n	1a0006c8 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a0006a2:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0006a4:	4a09      	ldr	r2, [pc, #36]	; (1a0006cc <Board_SetupMuxing+0x30>)
1a0006a6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0006aa:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a0006ae:	784a      	ldrb	r2, [r1, #1]
1a0006b0:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0006b2:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a0006b6:	4906      	ldr	r1, [pc, #24]	; (1a0006d0 <Board_SetupMuxing+0x34>)
1a0006b8:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0006bc:	3301      	adds	r3, #1
1a0006be:	2b1c      	cmp	r3, #28
1a0006c0:	d9f0      	bls.n	1a0006a4 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0006c2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0006c6:	4770      	bx	lr
1a0006c8:	4770      	bx	lr
1a0006ca:	bf00      	nop
1a0006cc:	1a00222c 	.word	0x1a00222c
1a0006d0:	40086000 	.word	0x40086000

1a0006d4 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0006d4:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0006d6:	4a17      	ldr	r2, [pc, #92]	; (1a000734 <Board_SetupClocking+0x60>)
1a0006d8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0006dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0006e0:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0006e4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0006e8:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0006ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0006f0:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0006f4:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0006f8:	2201      	movs	r2, #1
1a0006fa:	490f      	ldr	r1, [pc, #60]	; (1a000738 <Board_SetupClocking+0x64>)
1a0006fc:	2006      	movs	r0, #6
1a0006fe:	f000 f993 	bl	1a000a28 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000702:	2400      	movs	r4, #0
1a000704:	b14c      	cbz	r4, 1a00071a <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000706:	4b0b      	ldr	r3, [pc, #44]	; (1a000734 <Board_SetupClocking+0x60>)
1a000708:	685a      	ldr	r2, [r3, #4]
1a00070a:	f022 020c 	bic.w	r2, r2, #12
1a00070e:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000710:	685a      	ldr	r2, [r3, #4]
1a000712:	f042 0203 	orr.w	r2, r2, #3
1a000716:	605a      	str	r2, [r3, #4]
}
1a000718:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00071a:	4808      	ldr	r0, [pc, #32]	; (1a00073c <Board_SetupClocking+0x68>)
1a00071c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000720:	2301      	movs	r3, #1
1a000722:	788a      	ldrb	r2, [r1, #2]
1a000724:	7849      	ldrb	r1, [r1, #1]
1a000726:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00072a:	f000 fce3 	bl	1a0010f4 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00072e:	3401      	adds	r4, #1
1a000730:	e7e8      	b.n	1a000704 <Board_SetupClocking+0x30>
1a000732:	bf00      	nop
1a000734:	40043000 	.word	0x40043000
1a000738:	0c28cb00 	.word	0x0c28cb00
1a00073c:	1a002228 	.word	0x1a002228

1a000740 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000740:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000742:	f7ff ffab 	bl	1a00069c <Board_SetupMuxing>
    Board_SetupClocking();
1a000746:	f7ff ffc5 	bl	1a0006d4 <Board_SetupClocking>
}
1a00074a:	bd08      	pop	{r3, pc}

1a00074c <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00074c:	2200      	movs	r2, #0
1a00074e:	2a05      	cmp	r2, #5
1a000750:	d819      	bhi.n	1a000786 <Board_LED_Init+0x3a>
{
1a000752:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000754:	490c      	ldr	r1, [pc, #48]	; (1a000788 <Board_LED_Init+0x3c>)
1a000756:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a00075a:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a00075e:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000760:	4b0a      	ldr	r3, [pc, #40]	; (1a00078c <Board_LED_Init+0x40>)
1a000762:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000766:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a00076a:	2001      	movs	r0, #1
1a00076c:	40a0      	lsls	r0, r4
1a00076e:	4301      	orrs	r1, r0
1a000770:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000774:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000778:	2100      	movs	r1, #0
1a00077a:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a00077c:	3201      	adds	r2, #1
1a00077e:	2a05      	cmp	r2, #5
1a000780:	d9e8      	bls.n	1a000754 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a000782:	bc70      	pop	{r4, r5, r6}
1a000784:	4770      	bx	lr
1a000786:	4770      	bx	lr
1a000788:	1a0022ac 	.word	0x1a0022ac
1a00078c:	400f4000 	.word	0x400f4000

1a000790 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000790:	2300      	movs	r3, #0
1a000792:	2b03      	cmp	r3, #3
1a000794:	d816      	bhi.n	1a0007c4 <Board_TEC_Init+0x34>
{
1a000796:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000798:	490b      	ldr	r1, [pc, #44]	; (1a0007c8 <Board_TEC_Init+0x38>)
1a00079a:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a00079e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0007a2:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a0007a4:	4c09      	ldr	r4, [pc, #36]	; (1a0007cc <Board_TEC_Init+0x3c>)
1a0007a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0007aa:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0007ae:	2001      	movs	r0, #1
1a0007b0:	40a8      	lsls	r0, r5
1a0007b2:	ea21 0100 	bic.w	r1, r1, r0
1a0007b6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0007ba:	3301      	adds	r3, #1
1a0007bc:	2b03      	cmp	r3, #3
1a0007be:	d9eb      	bls.n	1a000798 <Board_TEC_Init+0x8>
   }
}
1a0007c0:	bc30      	pop	{r4, r5}
1a0007c2:	4770      	bx	lr
1a0007c4:	4770      	bx	lr
1a0007c6:	bf00      	nop
1a0007c8:	1a0022a4 	.word	0x1a0022a4
1a0007cc:	400f4000 	.word	0x400f4000

1a0007d0 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0007d0:	2300      	movs	r3, #0
1a0007d2:	2b08      	cmp	r3, #8
1a0007d4:	d816      	bhi.n	1a000804 <Board_GPIO_Init+0x34>
{
1a0007d6:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0007d8:	490b      	ldr	r1, [pc, #44]	; (1a000808 <Board_GPIO_Init+0x38>)
1a0007da:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0007de:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0007e2:	784d      	ldrb	r5, [r1, #1]
1a0007e4:	4c09      	ldr	r4, [pc, #36]	; (1a00080c <Board_GPIO_Init+0x3c>)
1a0007e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a0007ea:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a0007ee:	2001      	movs	r0, #1
1a0007f0:	40a8      	lsls	r0, r5
1a0007f2:	ea21 0100 	bic.w	r1, r1, r0
1a0007f6:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a0007fa:	3301      	adds	r3, #1
1a0007fc:	2b08      	cmp	r3, #8
1a0007fe:	d9eb      	bls.n	1a0007d8 <Board_GPIO_Init+0x8>
   }
}
1a000800:	bc30      	pop	{r4, r5}
1a000802:	4770      	bx	lr
1a000804:	4770      	bx	lr
1a000806:	bf00      	nop
1a000808:	1a0022b8 	.word	0x1a0022b8
1a00080c:	400f4000 	.word	0x400f4000

1a000810 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000810:	b510      	push	{r4, lr}
1a000812:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000814:	4c08      	ldr	r4, [pc, #32]	; (1a000838 <Board_ADC_Init+0x28>)
1a000816:	4669      	mov	r1, sp
1a000818:	4620      	mov	r0, r4
1a00081a:	f000 f9ff 	bl	1a000c1c <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00081e:	4a07      	ldr	r2, [pc, #28]	; (1a00083c <Board_ADC_Init+0x2c>)
1a000820:	4669      	mov	r1, sp
1a000822:	4620      	mov	r0, r4
1a000824:	f000 fa1a 	bl	1a000c5c <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000828:	2200      	movs	r2, #0
1a00082a:	4669      	mov	r1, sp
1a00082c:	4620      	mov	r0, r4
1a00082e:	f000 fa2e 	bl	1a000c8e <Chip_ADC_SetResolution>
}
1a000832:	b002      	add	sp, #8
1a000834:	bd10      	pop	{r4, pc}
1a000836:	bf00      	nop
1a000838:	400e3000 	.word	0x400e3000
1a00083c:	00061a80 	.word	0x00061a80

1a000840 <Board_SPI_Init>:
{
1a000840:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000842:	4c0b      	ldr	r4, [pc, #44]	; (1a000870 <Board_SPI_Init+0x30>)
1a000844:	4620      	mov	r0, r4
1a000846:	f000 f895 	bl	1a000974 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00084a:	6863      	ldr	r3, [r4, #4]
1a00084c:	f023 0304 	bic.w	r3, r3, #4
1a000850:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000852:	6823      	ldr	r3, [r4, #0]
1a000854:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000858:	f043 0307 	orr.w	r3, r3, #7
1a00085c:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a00085e:	4905      	ldr	r1, [pc, #20]	; (1a000874 <Board_SPI_Init+0x34>)
1a000860:	4620      	mov	r0, r4
1a000862:	f000 f868 	bl	1a000936 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000866:	6863      	ldr	r3, [r4, #4]
1a000868:	f043 0302 	orr.w	r3, r3, #2
1a00086c:	6063      	str	r3, [r4, #4]
}
1a00086e:	bd10      	pop	{r4, pc}
1a000870:	400c5000 	.word	0x400c5000
1a000874:	000186a0 	.word	0x000186a0

1a000878 <Board_I2C_Init>:
{
1a000878:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a00087a:	2000      	movs	r0, #0
1a00087c:	f000 f8a6 	bl	1a0009cc <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000880:	4b04      	ldr	r3, [pc, #16]	; (1a000894 <Board_I2C_Init+0x1c>)
1a000882:	f640 0208 	movw	r2, #2056	; 0x808
1a000886:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a00088a:	4903      	ldr	r1, [pc, #12]	; (1a000898 <Board_I2C_Init+0x20>)
1a00088c:	2000      	movs	r0, #0
1a00088e:	f000 f8af 	bl	1a0009f0 <Chip_I2C_SetClockRate>
}
1a000892:	bd08      	pop	{r3, pc}
1a000894:	40086000 	.word	0x40086000
1a000898:	000f4240 	.word	0x000f4240

1a00089c <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a00089c:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a00089e:	4c07      	ldr	r4, [pc, #28]	; (1a0008bc <Board_Debug_Init+0x20>)
1a0008a0:	4620      	mov	r0, r4
1a0008a2:	f000 fce1 	bl	1a001268 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a0008a6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0008aa:	4620      	mov	r0, r4
1a0008ac:	f000 fd06 	bl	1a0012bc <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a0008b0:	2303      	movs	r3, #3
1a0008b2:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0008b4:	2301      	movs	r3, #1
1a0008b6:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a0008b8:	bd10      	pop	{r4, pc}
1a0008ba:	bf00      	nop
1a0008bc:	400c1000 	.word	0x400c1000

1a0008c0 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a0008c0:	b508      	push	{r3, lr}
   DEBUGINIT();
1a0008c2:	f7ff ffeb 	bl	1a00089c <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a0008c6:	4809      	ldr	r0, [pc, #36]	; (1a0008ec <Board_Init+0x2c>)
1a0008c8:	f000 f95a 	bl	1a000b80 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a0008cc:	f7ff ff80 	bl	1a0007d0 <Board_GPIO_Init>
   Board_ADC_Init();
1a0008d0:	f7ff ff9e 	bl	1a000810 <Board_ADC_Init>
   Board_SPI_Init();
1a0008d4:	f7ff ffb4 	bl	1a000840 <Board_SPI_Init>
   Board_I2C_Init();
1a0008d8:	f7ff ffce 	bl	1a000878 <Board_I2C_Init>

   Board_LED_Init();
1a0008dc:	f7ff ff36 	bl	1a00074c <Board_LED_Init>
   Board_TEC_Init();
1a0008e0:	f7ff ff56 	bl	1a000790 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a0008e4:	f000 f9da 	bl	1a000c9c <SystemCoreClockUpdate>
}
1a0008e8:	bd08      	pop	{r3, pc}
1a0008ea:	bf00      	nop
1a0008ec:	400f4000 	.word	0x400f4000

1a0008f0 <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a0008f0:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0008f2:	f7ff ffd3 	bl	1a00089c <Board_Debug_Init>
1a0008f6:	bd08      	pop	{r3, pc}

1a0008f8 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0008f8:	4b03      	ldr	r3, [pc, #12]	; (1a000908 <Chip_SSP_GetClockIndex+0x10>)
1a0008fa:	4298      	cmp	r0, r3
1a0008fc:	d001      	beq.n	1a000902 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0008fe:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a000900:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a000902:	20a5      	movs	r0, #165	; 0xa5
1a000904:	4770      	bx	lr
1a000906:	bf00      	nop
1a000908:	400c5000 	.word	0x400c5000

1a00090c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00090c:	4b04      	ldr	r3, [pc, #16]	; (1a000920 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00090e:	4298      	cmp	r0, r3
1a000910:	d002      	beq.n	1a000918 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a000912:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a000916:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a000918:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a00091c:	4770      	bx	lr
1a00091e:	bf00      	nop
1a000920:	400c5000 	.word	0x400c5000

1a000924 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a000924:	6803      	ldr	r3, [r0, #0]
1a000926:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00092a:	0209      	lsls	r1, r1, #8
1a00092c:	b289      	uxth	r1, r1
1a00092e:	4319      	orrs	r1, r3
1a000930:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a000932:	6102      	str	r2, [r0, #16]
}
1a000934:	4770      	bx	lr

1a000936 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a000936:	b570      	push	{r4, r5, r6, lr}
1a000938:	4606      	mov	r6, r0
1a00093a:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00093c:	f7ff ffe6 	bl	1a00090c <Chip_SSP_GetPeriphClockIndex>
1a000940:	f000 fc56 	bl	1a0011f0 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a000944:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a000946:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a00094a:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a00094c:	e000      	b.n	1a000950 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a00094e:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a000950:	42ab      	cmp	r3, r5
1a000952:	d90b      	bls.n	1a00096c <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a000954:	1c4c      	adds	r4, r1, #1
1a000956:	fb02 f304 	mul.w	r3, r2, r4
1a00095a:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00095e:	429d      	cmp	r5, r3
1a000960:	d2f6      	bcs.n	1a000950 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a000962:	2cff      	cmp	r4, #255	; 0xff
1a000964:	d9f3      	bls.n	1a00094e <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a000966:	3202      	adds	r2, #2
				cr0_div = 0;
1a000968:	2100      	movs	r1, #0
1a00096a:	e7f1      	b.n	1a000950 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a00096c:	4630      	mov	r0, r6
1a00096e:	f7ff ffd9 	bl	1a000924 <Chip_SSP_SetClockRate>
}
1a000972:	bd70      	pop	{r4, r5, r6, pc}

1a000974 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a000974:	b510      	push	{r4, lr}
1a000976:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a000978:	f7ff ffbe 	bl	1a0008f8 <Chip_SSP_GetClockIndex>
1a00097c:	f000 fc1e 	bl	1a0011bc <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000980:	4620      	mov	r0, r4
1a000982:	f7ff ffc3 	bl	1a00090c <Chip_SSP_GetPeriphClockIndex>
1a000986:	f000 fc19 	bl	1a0011bc <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00098a:	6863      	ldr	r3, [r4, #4]
1a00098c:	f023 0304 	bic.w	r3, r3, #4
1a000990:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000992:	6823      	ldr	r3, [r4, #0]
1a000994:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000998:	f043 0307 	orr.w	r3, r3, #7
1a00099c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00099e:	4902      	ldr	r1, [pc, #8]	; (1a0009a8 <Chip_SSP_Init+0x34>)
1a0009a0:	4620      	mov	r0, r4
1a0009a2:	f7ff ffc8 	bl	1a000936 <Chip_SSP_SetBitRate>
}
1a0009a6:	bd10      	pop	{r4, pc}
1a0009a8:	000186a0 	.word	0x000186a0

1a0009ac <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0009ac:	2901      	cmp	r1, #1
1a0009ae:	d109      	bne.n	1a0009c4 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a0009b0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0009b4:	0082      	lsls	r2, r0, #2
1a0009b6:	4b04      	ldr	r3, [pc, #16]	; (1a0009c8 <Chip_I2C_EventHandler+0x1c>)
1a0009b8:	4413      	add	r3, r2
1a0009ba:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a0009bc:	7d13      	ldrb	r3, [r2, #20]
1a0009be:	b2db      	uxtb	r3, r3
1a0009c0:	2b04      	cmp	r3, #4
1a0009c2:	d0fb      	beq.n	1a0009bc <Chip_I2C_EventHandler+0x10>
}
1a0009c4:	4770      	bx	lr
1a0009c6:	bf00      	nop
1a0009c8:	10000000 	.word	0x10000000

1a0009cc <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a0009cc:	b570      	push	{r4, r5, r6, lr}
1a0009ce:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a0009d0:	4e06      	ldr	r6, [pc, #24]	; (1a0009ec <Chip_I2C_Init+0x20>)
1a0009d2:	00c4      	lsls	r4, r0, #3
1a0009d4:	1a22      	subs	r2, r4, r0
1a0009d6:	0093      	lsls	r3, r2, #2
1a0009d8:	4433      	add	r3, r6
1a0009da:	8898      	ldrh	r0, [r3, #4]
1a0009dc:	f000 fbee 	bl	1a0011bc <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0009e0:	1b64      	subs	r4, r4, r5
1a0009e2:	00a3      	lsls	r3, r4, #2
1a0009e4:	58f3      	ldr	r3, [r6, r3]
1a0009e6:	226c      	movs	r2, #108	; 0x6c
1a0009e8:	619a      	str	r2, [r3, #24]
}
1a0009ea:	bd70      	pop	{r4, r5, r6, pc}
1a0009ec:	10000000 	.word	0x10000000

1a0009f0 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0009f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0009f4:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a0009f6:	4e0b      	ldr	r6, [pc, #44]	; (1a000a24 <Chip_I2C_SetClockRate+0x34>)
1a0009f8:	00c5      	lsls	r5, r0, #3
1a0009fa:	1a2b      	subs	r3, r5, r0
1a0009fc:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000a00:	eb06 0308 	add.w	r3, r6, r8
1a000a04:	8898      	ldrh	r0, [r3, #4]
1a000a06:	f000 fbf3 	bl	1a0011f0 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000a0a:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000a0e:	f856 3008 	ldr.w	r3, [r6, r8]
1a000a12:	0842      	lsrs	r2, r0, #1
1a000a14:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000a16:	f856 3008 	ldr.w	r3, [r6, r8]
1a000a1a:	691a      	ldr	r2, [r3, #16]
1a000a1c:	1a80      	subs	r0, r0, r2
1a000a1e:	6158      	str	r0, [r3, #20]
}
1a000a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000a24:	10000000 	.word	0x10000000

1a000a28 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000a28:	b570      	push	{r4, r5, r6, lr}
1a000a2a:	b08a      	sub	sp, #40	; 0x28
1a000a2c:	4605      	mov	r5, r0
1a000a2e:	460e      	mov	r6, r1
1a000a30:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a000a32:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000a36:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a000a38:	2806      	cmp	r0, #6
1a000a3a:	d018      	beq.n	1a000a6e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000a3c:	2300      	movs	r3, #0
1a000a3e:	2201      	movs	r2, #1
1a000a40:	4629      	mov	r1, r5
1a000a42:	2004      	movs	r0, #4
1a000a44:	f000 fb56 	bl	1a0010f4 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a000a48:	4a4a      	ldr	r2, [pc, #296]	; (1a000b74 <Chip_SetupCoreClock+0x14c>)
1a000a4a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000a4c:	f043 0301 	orr.w	r3, r3, #1
1a000a50:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a000a52:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000a56:	a901      	add	r1, sp, #4
1a000a58:	4630      	mov	r0, r6
1a000a5a:	f000 fac3 	bl	1a000fe4 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a000a5e:	4b46      	ldr	r3, [pc, #280]	; (1a000b78 <Chip_SetupCoreClock+0x150>)
1a000a60:	429e      	cmp	r6, r3
1a000a62:	d916      	bls.n	1a000a92 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a000a64:	9b01      	ldr	r3, [sp, #4]
1a000a66:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000a6a:	d003      	beq.n	1a000a74 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a000a6c:	e7fe      	b.n	1a000a6c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a000a6e:	f000 fa1b 	bl	1a000ea8 <Chip_Clock_EnableCrystal>
1a000a72:	e7e3      	b.n	1a000a3c <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a000a74:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000a78:	d005      	beq.n	1a000a86 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a000a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000a7e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a000a80:	2500      	movs	r5, #0
			direct = 1;
1a000a82:	2601      	movs	r6, #1
1a000a84:	e007      	b.n	1a000a96 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a000a86:	9b04      	ldr	r3, [sp, #16]
1a000a88:	3301      	adds	r3, #1
1a000a8a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a000a8c:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a000a8e:	2600      	movs	r6, #0
1a000a90:	e001      	b.n	1a000a96 <Chip_SetupCoreClock+0x6e>
1a000a92:	2500      	movs	r5, #0
1a000a94:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000a96:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000a9a:	9b01      	ldr	r3, [sp, #4]
1a000a9c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000aa0:	9a05      	ldr	r2, [sp, #20]
1a000aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000aa6:	9a03      	ldr	r2, [sp, #12]
1a000aa8:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000aac:	9a04      	ldr	r2, [sp, #16]
1a000aae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000ab2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000ab6:	4a2f      	ldr	r2, [pc, #188]	; (1a000b74 <Chip_SetupCoreClock+0x14c>)
1a000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000aba:	4b2e      	ldr	r3, [pc, #184]	; (1a000b74 <Chip_SetupCoreClock+0x14c>)
1a000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a000abe:	f013 0f01 	tst.w	r3, #1
1a000ac2:	d0fa      	beq.n	1a000aba <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000ac4:	2300      	movs	r3, #0
1a000ac6:	2201      	movs	r2, #1
1a000ac8:	2109      	movs	r1, #9
1a000aca:	2004      	movs	r0, #4
1a000acc:	f000 fb12 	bl	1a0010f4 <Chip_Clock_SetBaseClock>

	if (direct) {
1a000ad0:	b306      	cbz	r6, 1a000b14 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000ad2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000ad6:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a000ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000ada:	1e5a      	subs	r2, r3, #1
1a000adc:	9209      	str	r2, [sp, #36]	; 0x24
1a000ade:	2b00      	cmp	r3, #0
1a000ae0:	d1fa      	bne.n	1a000ad8 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a000ae2:	9b01      	ldr	r3, [sp, #4]
1a000ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000ae8:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a000aea:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000aee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000af2:	9a05      	ldr	r2, [sp, #20]
1a000af4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000af8:	9a03      	ldr	r2, [sp, #12]
1a000afa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000afe:	9a04      	ldr	r2, [sp, #16]
1a000b00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000b04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000b08:	4a1a      	ldr	r2, [pc, #104]	; (1a000b74 <Chip_SetupCoreClock+0x14c>)
1a000b0a:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a000b0c:	2c00      	cmp	r4, #0
1a000b0e:	d12e      	bne.n	1a000b6e <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a000b10:	b00a      	add	sp, #40	; 0x28
1a000b12:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a000b14:	2d00      	cmp	r5, #0
1a000b16:	d0f9      	beq.n	1a000b0c <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a000b18:	f24c 3350 	movw	r3, #50000	; 0xc350
1a000b1c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a000b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000b20:	1e5a      	subs	r2, r3, #1
1a000b22:	9209      	str	r2, [sp, #36]	; 0x24
1a000b24:	2b00      	cmp	r3, #0
1a000b26:	d1fa      	bne.n	1a000b1e <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a000b28:	9b04      	ldr	r3, [sp, #16]
1a000b2a:	1e5a      	subs	r2, r3, #1
1a000b2c:	9204      	str	r2, [sp, #16]
1a000b2e:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a000b32:	9b01      	ldr	r3, [sp, #4]
1a000b34:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a000b38:	9905      	ldr	r1, [sp, #20]
1a000b3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a000b3e:	9903      	ldr	r1, [sp, #12]
1a000b40:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a000b44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000b48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a000b4c:	4a09      	ldr	r2, [pc, #36]	; (1a000b74 <Chip_SetupCoreClock+0x14c>)
1a000b4e:	6453      	str	r3, [r2, #68]	; 0x44
1a000b50:	e7dc      	b.n	1a000b0c <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000b52:	480a      	ldr	r0, [pc, #40]	; (1a000b7c <Chip_SetupCoreClock+0x154>)
1a000b54:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000b58:	78cb      	ldrb	r3, [r1, #3]
1a000b5a:	788a      	ldrb	r2, [r1, #2]
1a000b5c:	7849      	ldrb	r1, [r1, #1]
1a000b5e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000b62:	f000 fac7 	bl	1a0010f4 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000b66:	3401      	adds	r4, #1
1a000b68:	2c11      	cmp	r4, #17
1a000b6a:	d9f2      	bls.n	1a000b52 <Chip_SetupCoreClock+0x12a>
1a000b6c:	e7d0      	b.n	1a000b10 <Chip_SetupCoreClock+0xe8>
1a000b6e:	2400      	movs	r4, #0
1a000b70:	e7fa      	b.n	1a000b68 <Chip_SetupCoreClock+0x140>
1a000b72:	bf00      	nop
1a000b74:	40050000 	.word	0x40050000
1a000b78:	068e7780 	.word	0x068e7780
1a000b7c:	1a0022d0 	.word	0x1a0022d0

1a000b80 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000b80:	4770      	bx	lr
1a000b82:	Address 0x1a000b82 is out of bounds.


1a000b84 <Chip_TIMER_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_TIMER_GetClockIndex(LPC_TIMER_T *pTMR)
{
	CHIP_CCU_CLK_T clkTMR;

	if (pTMR == LPC_TIMER3) {
1a000b84:	4b09      	ldr	r3, [pc, #36]	; (1a000bac <Chip_TIMER_GetClockIndex+0x28>)
1a000b86:	4298      	cmp	r0, r3
1a000b88:	d00b      	beq.n	1a000ba2 <Chip_TIMER_GetClockIndex+0x1e>
		clkTMR = CLK_MX_TIMER3;
	}
    else if (pTMR == LPC_TIMER2) {
1a000b8a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
1a000b8e:	4298      	cmp	r0, r3
1a000b90:	d009      	beq.n	1a000ba6 <Chip_TIMER_GetClockIndex+0x22>
		clkTMR = CLK_MX_TIMER2;
	}
    else if (pTMR == LPC_TIMER1) {
1a000b92:	f5a3 3378 	sub.w	r3, r3, #253952	; 0x3e000
1a000b96:	4298      	cmp	r0, r3
1a000b98:	d001      	beq.n	1a000b9e <Chip_TIMER_GetClockIndex+0x1a>
		clkTMR = CLK_MX_TIMER1;
	}
	else {
		clkTMR = CLK_MX_TIMER0;
1a000b9a:	2084      	movs	r0, #132	; 0x84
	}

	return clkTMR;
}
1a000b9c:	4770      	bx	lr
		clkTMR = CLK_MX_TIMER1;
1a000b9e:	2085      	movs	r0, #133	; 0x85
1a000ba0:	4770      	bx	lr
		clkTMR = CLK_MX_TIMER3;
1a000ba2:	20a4      	movs	r0, #164	; 0xa4
1a000ba4:	4770      	bx	lr
		clkTMR = CLK_MX_TIMER2;
1a000ba6:	20a3      	movs	r0, #163	; 0xa3
1a000ba8:	4770      	bx	lr
1a000baa:	bf00      	nop
1a000bac:	400c4000 	.word	0x400c4000

1a000bb0 <Chip_TIMER_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize a timer */
void Chip_TIMER_Init(LPC_TIMER_T *pTMR)
{
1a000bb0:	b508      	push	{r3, lr}
	Chip_Clock_Enable(Chip_TIMER_GetClockIndex(pTMR));
1a000bb2:	f7ff ffe7 	bl	1a000b84 <Chip_TIMER_GetClockIndex>
1a000bb6:	f000 fb01 	bl	1a0011bc <Chip_Clock_Enable>
}
1a000bba:	bd08      	pop	{r3, pc}

1a000bbc <Chip_TIMER_Reset>:
void Chip_TIMER_Reset(LPC_TIMER_T *pTMR)
{
	uint32_t reg;

	/* Disable timer, set terminal count to non-0 */
	reg = pTMR->TCR;
1a000bbc:	6842      	ldr	r2, [r0, #4]
	pTMR->TCR = 0;
1a000bbe:	2300      	movs	r3, #0
1a000bc0:	6043      	str	r3, [r0, #4]
	pTMR->TC = 1;
1a000bc2:	2301      	movs	r3, #1
1a000bc4:	6083      	str	r3, [r0, #8]

	/* Reset timer counter */
	pTMR->TCR = TIMER_RESET;
1a000bc6:	2302      	movs	r3, #2
1a000bc8:	6043      	str	r3, [r0, #4]

	/* Wait for terminal count to clear */
	while (pTMR->TC != 0) {}
1a000bca:	6883      	ldr	r3, [r0, #8]
1a000bcc:	2b00      	cmp	r3, #0
1a000bce:	d1fc      	bne.n	1a000bca <Chip_TIMER_Reset+0xe>

	/* Restore timer state */
	pTMR->TCR = reg;
1a000bd0:	6042      	str	r2, [r0, #4]
}
1a000bd2:	4770      	bx	lr

1a000bd4 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000bd4:	4b03      	ldr	r3, [pc, #12]	; (1a000be4 <Chip_ADC_GetClockIndex+0x10>)
1a000bd6:	4298      	cmp	r0, r3
1a000bd8:	d001      	beq.n	1a000bde <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000bda:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000bdc:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000bde:	2004      	movs	r0, #4
1a000be0:	4770      	bx	lr
1a000be2:	bf00      	nop
1a000be4:	400e4000 	.word	0x400e4000

1a000be8 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000be8:	b570      	push	{r4, r5, r6, lr}
1a000bea:	460d      	mov	r5, r1
1a000bec:	4614      	mov	r4, r2
1a000bee:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000bf0:	f7ff fff0 	bl	1a000bd4 <Chip_ADC_GetClockIndex>
1a000bf4:	f000 fafc 	bl	1a0011f0 <Chip_Clock_GetRate>
	if (burstMode) {
1a000bf8:	b155      	cbz	r5, 1a000c10 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000bfa:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000bfe:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000c02:	0064      	lsls	r4, r4, #1
1a000c04:	fbb0 f0f4 	udiv	r0, r0, r4
1a000c08:	b2c0      	uxtb	r0, r0
1a000c0a:	3801      	subs	r0, #1
	return div;
}
1a000c0c:	b2c0      	uxtb	r0, r0
1a000c0e:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000c10:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000c14:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000c18:	e7f1      	b.n	1a000bfe <getClkDiv+0x16>
1a000c1a:	Address 0x1a000c1a is out of bounds.


1a000c1c <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000c1c:	b538      	push	{r3, r4, r5, lr}
1a000c1e:	4605      	mov	r5, r0
1a000c20:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000c22:	f7ff ffd7 	bl	1a000bd4 <Chip_ADC_GetClockIndex>
1a000c26:	2301      	movs	r3, #1
1a000c28:	461a      	mov	r2, r3
1a000c2a:	4619      	mov	r1, r3
1a000c2c:	f000 faa8 	bl	1a001180 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000c30:	2100      	movs	r1, #0
1a000c32:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000c34:	4a08      	ldr	r2, [pc, #32]	; (1a000c58 <Chip_ADC_Init+0x3c>)
1a000c36:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000c38:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000c3a:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000c3c:	230b      	movs	r3, #11
1a000c3e:	4628      	mov	r0, r5
1a000c40:	f7ff ffd2 	bl	1a000be8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000c44:	0200      	lsls	r0, r0, #8
1a000c46:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000c4a:	7920      	ldrb	r0, [r4, #4]
1a000c4c:	0440      	lsls	r0, r0, #17
1a000c4e:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a000c52:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a000c54:	6028      	str	r0, [r5, #0]
}
1a000c56:	bd38      	pop	{r3, r4, r5, pc}
1a000c58:	00061a80 	.word	0x00061a80

1a000c5c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000c5c:	b570      	push	{r4, r5, r6, lr}
1a000c5e:	4605      	mov	r5, r0
1a000c60:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000c62:	6804      	ldr	r4, [r0, #0]
1a000c64:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000c68:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000c6c:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000c6e:	790b      	ldrb	r3, [r1, #4]
1a000c70:	f1c3 030b 	rsb	r3, r3, #11
1a000c74:	b2db      	uxtb	r3, r3
1a000c76:	7949      	ldrb	r1, [r1, #5]
1a000c78:	f7ff ffb6 	bl	1a000be8 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000c7c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000c80:	7933      	ldrb	r3, [r6, #4]
1a000c82:	045b      	lsls	r3, r3, #17
1a000c84:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000c88:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a000c8a:	602b      	str	r3, [r5, #0]
}
1a000c8c:	bd70      	pop	{r4, r5, r6, pc}

1a000c8e <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000c8e:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000c90:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000c92:	680a      	ldr	r2, [r1, #0]
1a000c94:	f7ff ffe2 	bl	1a000c5c <Chip_ADC_SetSampleRate>
}
1a000c98:	bd08      	pop	{r3, pc}
1a000c9a:	Address 0x1a000c9a is out of bounds.


1a000c9c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000c9c:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000c9e:	2069      	movs	r0, #105	; 0x69
1a000ca0:	f000 faa6 	bl	1a0011f0 <Chip_Clock_GetRate>
1a000ca4:	4b01      	ldr	r3, [pc, #4]	; (1a000cac <SystemCoreClockUpdate+0x10>)
1a000ca6:	6018      	str	r0, [r3, #0]
}
1a000ca8:	bd08      	pop	{r3, pc}
1a000caa:	bf00      	nop
1a000cac:	10000120 	.word	0x10000120

1a000cb0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000cb0:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000cb2:	680b      	ldr	r3, [r1, #0]
1a000cb4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000cb8:	d002      	beq.n	1a000cc0 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000cbe:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000cc0:	4607      	mov	r7, r0
1a000cc2:	2501      	movs	r5, #1
1a000cc4:	e03a      	b.n	1a000d3c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000cc6:	694b      	ldr	r3, [r1, #20]
1a000cc8:	fb03 f302 	mul.w	r3, r3, r2
1a000ccc:	fbb3 f3f5 	udiv	r3, r3, r5
1a000cd0:	e01c      	b.n	1a000d0c <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000cd2:	461c      	mov	r4, r3
	if (val < 0)
1a000cd4:	ebb0 0c04 	subs.w	ip, r0, r4
1a000cd8:	d427      	bmi.n	1a000d2a <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000cda:	4567      	cmp	r7, ip
1a000cdc:	d906      	bls.n	1a000cec <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a000cde:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a000ce0:	1c77      	adds	r7, r6, #1
1a000ce2:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a000ce4:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000ce6:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a000ce8:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000cea:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a000cec:	3201      	adds	r2, #1
1a000cee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000cf2:	dc1d      	bgt.n	1a000d30 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a000cf4:	680c      	ldr	r4, [r1, #0]
1a000cf6:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000cfa:	d0e4      	beq.n	1a000cc6 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000cfc:	1c73      	adds	r3, r6, #1
1a000cfe:	fa02 fc03 	lsl.w	ip, r2, r3
1a000d02:	694b      	ldr	r3, [r1, #20]
1a000d04:	fb03 f30c 	mul.w	r3, r3, ip
1a000d08:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000d0c:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000d48 <pll_calc_divs+0x98>
1a000d10:	4563      	cmp	r3, ip
1a000d12:	d9eb      	bls.n	1a000cec <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000d14:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000d4c <pll_calc_divs+0x9c>
1a000d18:	4563      	cmp	r3, ip
1a000d1a:	d809      	bhi.n	1a000d30 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a000d1c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000d20:	d1d7      	bne.n	1a000cd2 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a000d22:	1c74      	adds	r4, r6, #1
1a000d24:	fa23 f404 	lsr.w	r4, r3, r4
1a000d28:	e7d4      	b.n	1a000cd4 <pll_calc_divs+0x24>
		return -val;
1a000d2a:	f1cc 0c00 	rsb	ip, ip, #0
1a000d2e:	e7d4      	b.n	1a000cda <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a000d30:	3601      	adds	r6, #1
1a000d32:	2e03      	cmp	r6, #3
1a000d34:	dc01      	bgt.n	1a000d3a <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a000d36:	2201      	movs	r2, #1
1a000d38:	e7d9      	b.n	1a000cee <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a000d3a:	3501      	adds	r5, #1
1a000d3c:	2d04      	cmp	r5, #4
1a000d3e:	dc01      	bgt.n	1a000d44 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a000d40:	2600      	movs	r6, #0
1a000d42:	e7f6      	b.n	1a000d32 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a000d44:	bcf0      	pop	{r4, r5, r6, r7}
1a000d46:	4770      	bx	lr
1a000d48:	094c5eff 	.word	0x094c5eff
1a000d4c:	1312d000 	.word	0x1312d000

1a000d50 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000d50:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000d52:	b099      	sub	sp, #100	; 0x64
1a000d54:	4605      	mov	r5, r0
1a000d56:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000d58:	225c      	movs	r2, #92	; 0x5c
1a000d5a:	2100      	movs	r1, #0
1a000d5c:	a801      	add	r0, sp, #4
1a000d5e:	f001 fa5b 	bl	1a002218 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000d62:	2380      	movs	r3, #128	; 0x80
1a000d64:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a000d66:	6963      	ldr	r3, [r4, #20]
1a000d68:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a000d6a:	7923      	ldrb	r3, [r4, #4]
1a000d6c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a000d70:	4669      	mov	r1, sp
1a000d72:	4628      	mov	r0, r5
1a000d74:	f7ff ff9c 	bl	1a000cb0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000d78:	9b06      	ldr	r3, [sp, #24]
1a000d7a:	42ab      	cmp	r3, r5
1a000d7c:	d027      	beq.n	1a000dce <pll_get_frac+0x7e>
	if (val < 0)
1a000d7e:	1aeb      	subs	r3, r5, r3
1a000d80:	d42e      	bmi.n	1a000de0 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000d82:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a000d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000d8a:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a000d8c:	6963      	ldr	r3, [r4, #20]
1a000d8e:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a000d90:	7923      	ldrb	r3, [r4, #4]
1a000d92:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a000d96:	a910      	add	r1, sp, #64	; 0x40
1a000d98:	4628      	mov	r0, r5
1a000d9a:	f7ff ff89 	bl	1a000cb0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000d9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a000da0:	42ab      	cmp	r3, r5
1a000da2:	d01f      	beq.n	1a000de4 <pll_get_frac+0x94>
	if (val < 0)
1a000da4:	1aeb      	subs	r3, r5, r3
1a000da6:	d425      	bmi.n	1a000df4 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000da8:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a000daa:	4b2b      	ldr	r3, [pc, #172]	; (1a000e58 <pll_get_frac+0x108>)
1a000dac:	429d      	cmp	r5, r3
1a000dae:	d923      	bls.n	1a000df8 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000db0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a000db2:	1aed      	subs	r5, r5, r3
1a000db4:	d433      	bmi.n	1a000e1e <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000db6:	42ae      	cmp	r6, r5
1a000db8:	dc3b      	bgt.n	1a000e32 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a000dba:	42be      	cmp	r6, r7
1a000dbc:	dc31      	bgt.n	1a000e22 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a000dbe:	466d      	mov	r5, sp
1a000dc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000dc4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000dc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000dcc:	e006      	b.n	1a000ddc <pll_get_frac+0x8c>
		*ppll = pll[0];
1a000dce:	466d      	mov	r5, sp
1a000dd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000dd4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000dd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000ddc:	b019      	add	sp, #100	; 0x64
1a000dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000de0:	425b      	negs	r3, r3
1a000de2:	e7ce      	b.n	1a000d82 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000de4:	ad10      	add	r5, sp, #64	; 0x40
1a000de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000dea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000dee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000df2:	e7f3      	b.n	1a000ddc <pll_get_frac+0x8c>
		return -val;
1a000df4:	425b      	negs	r3, r3
1a000df6:	e7d7      	b.n	1a000da8 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a000df8:	2340      	movs	r3, #64	; 0x40
1a000dfa:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a000dfc:	6963      	ldr	r3, [r4, #20]
1a000dfe:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a000e00:	a908      	add	r1, sp, #32
1a000e02:	4628      	mov	r0, r5
1a000e04:	f7ff ff54 	bl	1a000cb0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a000e0a:	42ab      	cmp	r3, r5
1a000e0c:	d1d0      	bne.n	1a000db0 <pll_get_frac+0x60>
			*ppll = pll[1];
1a000e0e:	ad08      	add	r5, sp, #32
1a000e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000e1c:	e7de      	b.n	1a000ddc <pll_get_frac+0x8c>
		return -val;
1a000e1e:	426d      	negs	r5, r5
1a000e20:	e7c9      	b.n	1a000db6 <pll_get_frac+0x66>
			*ppll = pll[2];
1a000e22:	ad10      	add	r5, sp, #64	; 0x40
1a000e24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000e30:	e7d4      	b.n	1a000ddc <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a000e32:	42af      	cmp	r7, r5
1a000e34:	db07      	blt.n	1a000e46 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a000e36:	ad08      	add	r5, sp, #32
1a000e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000e44:	e7ca      	b.n	1a000ddc <pll_get_frac+0x8c>
			*ppll = pll[2];
1a000e46:	ad10      	add	r5, sp, #64	; 0x40
1a000e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000e4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000e54:	e7c2      	b.n	1a000ddc <pll_get_frac+0x8c>
1a000e56:	bf00      	nop
1a000e58:	068e7780 	.word	0x068e7780

1a000e5c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000e5c:	b430      	push	{r4, r5}
1a000e5e:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000e60:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000e62:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000e64:	e000      	b.n	1a000e68 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000e66:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000e68:	281c      	cmp	r0, #28
1a000e6a:	d118      	bne.n	1a000e9e <Chip_Clock_FindBaseClock+0x42>
1a000e6c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000e70:	0051      	lsls	r1, r2, #1
1a000e72:	4a0c      	ldr	r2, [pc, #48]	; (1a000ea4 <Chip_Clock_FindBaseClock+0x48>)
1a000e74:	440a      	add	r2, r1
1a000e76:	7914      	ldrb	r4, [r2, #4]
1a000e78:	4284      	cmp	r4, r0
1a000e7a:	d010      	beq.n	1a000e9e <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000e7c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000e80:	004a      	lsls	r2, r1, #1
1a000e82:	4908      	ldr	r1, [pc, #32]	; (1a000ea4 <Chip_Clock_FindBaseClock+0x48>)
1a000e84:	5a8a      	ldrh	r2, [r1, r2]
1a000e86:	42aa      	cmp	r2, r5
1a000e88:	d8ed      	bhi.n	1a000e66 <Chip_Clock_FindBaseClock+0xa>
1a000e8a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000e8e:	0051      	lsls	r1, r2, #1
1a000e90:	4a04      	ldr	r2, [pc, #16]	; (1a000ea4 <Chip_Clock_FindBaseClock+0x48>)
1a000e92:	440a      	add	r2, r1
1a000e94:	8852      	ldrh	r2, [r2, #2]
1a000e96:	42aa      	cmp	r2, r5
1a000e98:	d3e5      	bcc.n	1a000e66 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a000e9a:	4620      	mov	r0, r4
1a000e9c:	e7e4      	b.n	1a000e68 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a000e9e:	bc30      	pop	{r4, r5}
1a000ea0:	4770      	bx	lr
1a000ea2:	bf00      	nop
1a000ea4:	1a002324 	.word	0x1a002324

1a000ea8 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000ea8:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000eae:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000eb0:	4a0d      	ldr	r2, [pc, #52]	; (1a000ee8 <Chip_Clock_EnableCrystal+0x40>)
1a000eb2:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000eb4:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000eb8:	6992      	ldr	r2, [r2, #24]
1a000eba:	428a      	cmp	r2, r1
1a000ebc:	d001      	beq.n	1a000ec2 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000ebe:	4a0a      	ldr	r2, [pc, #40]	; (1a000ee8 <Chip_Clock_EnableCrystal+0x40>)
1a000ec0:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000ec2:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000ec6:	4a09      	ldr	r2, [pc, #36]	; (1a000eec <Chip_Clock_EnableCrystal+0x44>)
1a000ec8:	6811      	ldr	r1, [r2, #0]
1a000eca:	4a09      	ldr	r2, [pc, #36]	; (1a000ef0 <Chip_Clock_EnableCrystal+0x48>)
1a000ecc:	4291      	cmp	r1, r2
1a000ece:	d901      	bls.n	1a000ed4 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000ed0:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000ed4:	4a04      	ldr	r2, [pc, #16]	; (1a000ee8 <Chip_Clock_EnableCrystal+0x40>)
1a000ed6:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000ed8:	9b01      	ldr	r3, [sp, #4]
1a000eda:	1e5a      	subs	r2, r3, #1
1a000edc:	9201      	str	r2, [sp, #4]
1a000ede:	2b00      	cmp	r3, #0
1a000ee0:	d1fa      	bne.n	1a000ed8 <Chip_Clock_EnableCrystal+0x30>
}
1a000ee2:	b002      	add	sp, #8
1a000ee4:	4770      	bx	lr
1a000ee6:	bf00      	nop
1a000ee8:	40050000 	.word	0x40050000
1a000eec:	1a0022cc 	.word	0x1a0022cc
1a000ef0:	01312cff 	.word	0x01312cff

1a000ef4 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000ef4:	3012      	adds	r0, #18
1a000ef6:	4b05      	ldr	r3, [pc, #20]	; (1a000f0c <Chip_Clock_GetDividerSource+0x18>)
1a000ef8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000efc:	f010 0f01 	tst.w	r0, #1
1a000f00:	d102      	bne.n	1a000f08 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000f02:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000f06:	4770      	bx	lr
		return CLKINPUT_PD;
1a000f08:	2011      	movs	r0, #17
}
1a000f0a:	4770      	bx	lr
1a000f0c:	40050000 	.word	0x40050000

1a000f10 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000f10:	f100 0212 	add.w	r2, r0, #18
1a000f14:	4b03      	ldr	r3, [pc, #12]	; (1a000f24 <Chip_Clock_GetDividerDivisor+0x14>)
1a000f16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000f1a:	4b03      	ldr	r3, [pc, #12]	; (1a000f28 <Chip_Clock_GetDividerDivisor+0x18>)
1a000f1c:	5c18      	ldrb	r0, [r3, r0]
}
1a000f1e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000f22:	4770      	bx	lr
1a000f24:	40050000 	.word	0x40050000
1a000f28:	1a00231c 	.word	0x1a00231c

1a000f2c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000f2c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000f2e:	2810      	cmp	r0, #16
1a000f30:	d80a      	bhi.n	1a000f48 <Chip_Clock_GetClockInputHz+0x1c>
1a000f32:	e8df f000 	tbb	[pc, r0]
1a000f36:	0b44      	.short	0x0b44
1a000f38:	0921180d 	.word	0x0921180d
1a000f3c:	2d2a2724 	.word	0x2d2a2724
1a000f40:	34300909 	.word	0x34300909
1a000f44:	3c38      	.short	0x3c38
1a000f46:	40          	.byte	0x40
1a000f47:	00          	.byte	0x00
	uint32_t rate = 0;
1a000f48:	2000      	movs	r0, #0
1a000f4a:	e03a      	b.n	1a000fc2 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a000f4c:	481e      	ldr	r0, [pc, #120]	; (1a000fc8 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000f4e:	e038      	b.n	1a000fc2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000f50:	4b1e      	ldr	r3, [pc, #120]	; (1a000fcc <Chip_Clock_GetClockInputHz+0xa0>)
1a000f52:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000f56:	f003 0307 	and.w	r3, r3, #7
1a000f5a:	2b04      	cmp	r3, #4
1a000f5c:	d001      	beq.n	1a000f62 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a000f5e:	481c      	ldr	r0, [pc, #112]	; (1a000fd0 <Chip_Clock_GetClockInputHz+0xa4>)
1a000f60:	e02f      	b.n	1a000fc2 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a000f62:	2000      	movs	r0, #0
1a000f64:	e02d      	b.n	1a000fc2 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000f66:	4b19      	ldr	r3, [pc, #100]	; (1a000fcc <Chip_Clock_GetClockInputHz+0xa0>)
1a000f68:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000f6c:	f003 0307 	and.w	r3, r3, #7
1a000f70:	2b04      	cmp	r3, #4
1a000f72:	d027      	beq.n	1a000fc4 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000f74:	4816      	ldr	r0, [pc, #88]	; (1a000fd0 <Chip_Clock_GetClockInputHz+0xa4>)
1a000f76:	e024      	b.n	1a000fc2 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a000f78:	4b16      	ldr	r3, [pc, #88]	; (1a000fd4 <Chip_Clock_GetClockInputHz+0xa8>)
1a000f7a:	6818      	ldr	r0, [r3, #0]
		break;
1a000f7c:	e021      	b.n	1a000fc2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a000f7e:	4b16      	ldr	r3, [pc, #88]	; (1a000fd8 <Chip_Clock_GetClockInputHz+0xac>)
1a000f80:	6818      	ldr	r0, [r3, #0]
		break;
1a000f82:	e01e      	b.n	1a000fc2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000f84:	4b15      	ldr	r3, [pc, #84]	; (1a000fdc <Chip_Clock_GetClockInputHz+0xb0>)
1a000f86:	6818      	ldr	r0, [r3, #0]
		break;
1a000f88:	e01b      	b.n	1a000fc2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000f8a:	4b14      	ldr	r3, [pc, #80]	; (1a000fdc <Chip_Clock_GetClockInputHz+0xb0>)
1a000f8c:	6858      	ldr	r0, [r3, #4]
		break;
1a000f8e:	e018      	b.n	1a000fc2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a000f90:	f000 f868 	bl	1a001064 <Chip_Clock_GetMainPLLHz>
		break;
1a000f94:	e015      	b.n	1a000fc2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000f96:	2100      	movs	r1, #0
1a000f98:	f000 f89a 	bl	1a0010d0 <Chip_Clock_GetDivRate>
		break;
1a000f9c:	e011      	b.n	1a000fc2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000f9e:	2101      	movs	r1, #1
1a000fa0:	f000 f896 	bl	1a0010d0 <Chip_Clock_GetDivRate>
		break;
1a000fa4:	e00d      	b.n	1a000fc2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000fa6:	2102      	movs	r1, #2
1a000fa8:	f000 f892 	bl	1a0010d0 <Chip_Clock_GetDivRate>
		break;
1a000fac:	e009      	b.n	1a000fc2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000fae:	2103      	movs	r1, #3
1a000fb0:	f000 f88e 	bl	1a0010d0 <Chip_Clock_GetDivRate>
		break;
1a000fb4:	e005      	b.n	1a000fc2 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000fb6:	2104      	movs	r1, #4
1a000fb8:	f000 f88a 	bl	1a0010d0 <Chip_Clock_GetDivRate>
		break;
1a000fbc:	e001      	b.n	1a000fc2 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a000fbe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a000fc2:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a000fc4:	4806      	ldr	r0, [pc, #24]	; (1a000fe0 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000fc6:	e7fc      	b.n	1a000fc2 <Chip_Clock_GetClockInputHz+0x96>
1a000fc8:	00b71b00 	.word	0x00b71b00
1a000fcc:	40043000 	.word	0x40043000
1a000fd0:	017d7840 	.word	0x017d7840
1a000fd4:	1a0022a0 	.word	0x1a0022a0
1a000fd8:	1a0022cc 	.word	0x1a0022cc
1a000fdc:	100000d0 	.word	0x100000d0
1a000fe0:	02faf080 	.word	0x02faf080

1a000fe4 <Chip_Clock_CalcMainPLLValue>:
{
1a000fe4:	b538      	push	{r3, r4, r5, lr}
1a000fe6:	4605      	mov	r5, r0
1a000fe8:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000fea:	7908      	ldrb	r0, [r1, #4]
1a000fec:	f7ff ff9e 	bl	1a000f2c <Chip_Clock_GetClockInputHz>
1a000ff0:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000ff2:	4b19      	ldr	r3, [pc, #100]	; (1a001058 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000ff4:	442b      	add	r3, r5
1a000ff6:	4a19      	ldr	r2, [pc, #100]	; (1a00105c <Chip_Clock_CalcMainPLLValue+0x78>)
1a000ff8:	4293      	cmp	r3, r2
1a000ffa:	d821      	bhi.n	1a001040 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000ffc:	b318      	cbz	r0, 1a001046 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000ffe:	2380      	movs	r3, #128	; 0x80
1a001000:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001002:	2300      	movs	r3, #0
1a001004:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001006:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001008:	fbb5 f3f0 	udiv	r3, r5, r0
1a00100c:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00100e:	4a14      	ldr	r2, [pc, #80]	; (1a001060 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001010:	4295      	cmp	r5, r2
1a001012:	d903      	bls.n	1a00101c <Chip_Clock_CalcMainPLLValue+0x38>
1a001014:	fb03 f000 	mul.w	r0, r3, r0
1a001018:	42a8      	cmp	r0, r5
1a00101a:	d007      	beq.n	1a00102c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a00101c:	4621      	mov	r1, r4
1a00101e:	4628      	mov	r0, r5
1a001020:	f7ff fe96 	bl	1a000d50 <pll_get_frac>
		if (!ppll->nsel) {
1a001024:	68a3      	ldr	r3, [r4, #8]
1a001026:	b18b      	cbz	r3, 1a00104c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001028:	3b01      	subs	r3, #1
1a00102a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a00102c:	6923      	ldr	r3, [r4, #16]
1a00102e:	b183      	cbz	r3, 1a001052 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001030:	68e2      	ldr	r2, [r4, #12]
1a001032:	b10a      	cbz	r2, 1a001038 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001034:	3a01      	subs	r2, #1
1a001036:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001038:	3b01      	subs	r3, #1
1a00103a:	6123      	str	r3, [r4, #16]
	return 0;
1a00103c:	2000      	movs	r0, #0
}
1a00103e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001040:	f04f 30ff 	mov.w	r0, #4294967295
1a001044:	e7fb      	b.n	1a00103e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001046:	f04f 30ff 	mov.w	r0, #4294967295
1a00104a:	e7f8      	b.n	1a00103e <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a00104c:	f04f 30ff 	mov.w	r0, #4294967295
1a001050:	e7f5      	b.n	1a00103e <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001052:	f04f 30ff 	mov.w	r0, #4294967295
1a001056:	e7f2      	b.n	1a00103e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001058:	ff6b3a10 	.word	0xff6b3a10
1a00105c:	0b940510 	.word	0x0b940510
1a001060:	094c5eff 	.word	0x094c5eff

1a001064 <Chip_Clock_GetMainPLLHz>:
{
1a001064:	b530      	push	{r4, r5, lr}
1a001066:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001068:	4d17      	ldr	r5, [pc, #92]	; (1a0010c8 <Chip_Clock_GetMainPLLHz+0x64>)
1a00106a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a00106c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001070:	f7ff ff5c 	bl	1a000f2c <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001074:	4b15      	ldr	r3, [pc, #84]	; (1a0010cc <Chip_Clock_GetMainPLLHz+0x68>)
1a001076:	681b      	ldr	r3, [r3, #0]
1a001078:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00107a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a00107c:	f013 0f01 	tst.w	r3, #1
1a001080:	d020      	beq.n	1a0010c4 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a001082:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001086:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00108a:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a00108e:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001092:	3301      	adds	r3, #1
	n = nsel + 1;
1a001094:	3201      	adds	r2, #1
	p = ptab[psel];
1a001096:	f10d 0c08 	add.w	ip, sp, #8
1a00109a:	4461      	add	r1, ip
1a00109c:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0010a0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0010a4:	d108      	bne.n	1a0010b8 <Chip_Clock_GetMainPLLHz+0x54>
1a0010a6:	b93d      	cbnz	r5, 1a0010b8 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0010a8:	0049      	lsls	r1, r1, #1
1a0010aa:	fbb3 f3f1 	udiv	r3, r3, r1
1a0010ae:	fbb0 f0f2 	udiv	r0, r0, r2
1a0010b2:	fb00 f003 	mul.w	r0, r0, r3
1a0010b6:	e003      	b.n	1a0010c0 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a0010b8:	fbb0 f0f2 	udiv	r0, r0, r2
1a0010bc:	fb03 f000 	mul.w	r0, r3, r0
}
1a0010c0:	b003      	add	sp, #12
1a0010c2:	bd30      	pop	{r4, r5, pc}
		return 0;
1a0010c4:	2000      	movs	r0, #0
1a0010c6:	e7fb      	b.n	1a0010c0 <Chip_Clock_GetMainPLLHz+0x5c>
1a0010c8:	40050000 	.word	0x40050000
1a0010cc:	1a002318 	.word	0x1a002318

1a0010d0 <Chip_Clock_GetDivRate>:
{
1a0010d0:	b538      	push	{r3, r4, r5, lr}
1a0010d2:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0010d4:	4608      	mov	r0, r1
1a0010d6:	f7ff ff0d 	bl	1a000ef4 <Chip_Clock_GetDividerSource>
1a0010da:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0010dc:	4620      	mov	r0, r4
1a0010de:	f7ff ff17 	bl	1a000f10 <Chip_Clock_GetDividerDivisor>
1a0010e2:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0010e4:	4628      	mov	r0, r5
1a0010e6:	f7ff ff21 	bl	1a000f2c <Chip_Clock_GetClockInputHz>
1a0010ea:	3401      	adds	r4, #1
}
1a0010ec:	fbb0 f0f4 	udiv	r0, r0, r4
1a0010f0:	bd38      	pop	{r3, r4, r5, pc}
1a0010f2:	Address 0x1a0010f2 is out of bounds.


1a0010f4 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0010f4:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0010f6:	f100 0416 	add.w	r4, r0, #22
1a0010fa:	00a4      	lsls	r4, r4, #2
1a0010fc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001100:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001104:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001106:	281b      	cmp	r0, #27
1a001108:	d813      	bhi.n	1a001132 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00110a:	2911      	cmp	r1, #17
1a00110c:	d01a      	beq.n	1a001144 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00110e:	4d0e      	ldr	r5, [pc, #56]	; (1a001148 <Chip_Clock_SetBaseClock+0x54>)
1a001110:	4025      	ands	r5, r4

			if (autoblocken) {
1a001112:	b10a      	cbz	r2, 1a001118 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001114:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001118:	b10b      	cbz	r3, 1a00111e <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00111a:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00111e:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001122:	3016      	adds	r0, #22
1a001124:	0080      	lsls	r0, r0, #2
1a001126:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00112a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00112e:	6045      	str	r5, [r0, #4]
1a001130:	e008      	b.n	1a001144 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001132:	f044 0401 	orr.w	r4, r4, #1
1a001136:	3016      	adds	r0, #22
1a001138:	0080      	lsls	r0, r0, #2
1a00113a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00113e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001142:	6044      	str	r4, [r0, #4]
	}
}
1a001144:	bc30      	pop	{r4, r5}
1a001146:	4770      	bx	lr
1a001148:	e0fff7fe 	.word	0xe0fff7fe

1a00114c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a00114c:	281b      	cmp	r0, #27
1a00114e:	d80c      	bhi.n	1a00116a <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001150:	3016      	adds	r0, #22
1a001152:	0080      	lsls	r0, r0, #2
1a001154:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001158:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00115c:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00115e:	f010 0f01 	tst.w	r0, #1
1a001162:	d104      	bne.n	1a00116e <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001164:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001168:	4770      	bx	lr
		return CLKINPUT_PD;
1a00116a:	2011      	movs	r0, #17
1a00116c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00116e:	2011      	movs	r0, #17
}
1a001170:	4770      	bx	lr

1a001172 <Chip_Clock_GetBaseClocktHz>:
{
1a001172:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001174:	f7ff ffea 	bl	1a00114c <Chip_Clock_GetBaseClock>
1a001178:	f7ff fed8 	bl	1a000f2c <Chip_Clock_GetClockInputHz>
}
1a00117c:	bd08      	pop	{r3, pc}
1a00117e:	Address 0x1a00117e is out of bounds.


1a001180 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001180:	b971      	cbnz	r1, 1a0011a0 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a001182:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001184:	b10a      	cbz	r2, 1a00118a <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a001186:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00118a:	2b02      	cmp	r3, #2
1a00118c:	d00a      	beq.n	1a0011a4 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00118e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001192:	d30a      	bcc.n	1a0011aa <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001194:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001198:	4b06      	ldr	r3, [pc, #24]	; (1a0011b4 <Chip_Clock_EnableOpts+0x34>)
1a00119a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00119e:	4770      	bx	lr
		reg |= (1 << 1);
1a0011a0:	2103      	movs	r1, #3
1a0011a2:	e7ef      	b.n	1a001184 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0011a4:	f041 0120 	orr.w	r1, r1, #32
1a0011a8:	e7f1      	b.n	1a00118e <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0011aa:	3020      	adds	r0, #32
1a0011ac:	4b02      	ldr	r3, [pc, #8]	; (1a0011b8 <Chip_Clock_EnableOpts+0x38>)
1a0011ae:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0011b2:	4770      	bx	lr
1a0011b4:	40052000 	.word	0x40052000
1a0011b8:	40051000 	.word	0x40051000

1a0011bc <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0011bc:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0011c0:	d309      	bcc.n	1a0011d6 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0011c2:	4a09      	ldr	r2, [pc, #36]	; (1a0011e8 <Chip_Clock_Enable+0x2c>)
1a0011c4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0011c8:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0011cc:	f043 0301 	orr.w	r3, r3, #1
1a0011d0:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0011d4:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0011d6:	4a05      	ldr	r2, [pc, #20]	; (1a0011ec <Chip_Clock_Enable+0x30>)
1a0011d8:	3020      	adds	r0, #32
1a0011da:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0011de:	f043 0301 	orr.w	r3, r3, #1
1a0011e2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0011e6:	4770      	bx	lr
1a0011e8:	40052000 	.word	0x40052000
1a0011ec:	40051000 	.word	0x40051000

1a0011f0 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0011f0:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0011f2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0011f6:	d309      	bcc.n	1a00120c <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0011f8:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0011fc:	4a0d      	ldr	r2, [pc, #52]	; (1a001234 <Chip_Clock_GetRate+0x44>)
1a0011fe:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001202:	f014 0f01 	tst.w	r4, #1
1a001206:	d107      	bne.n	1a001218 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001208:	2000      	movs	r0, #0
	}

	return rate;
}
1a00120a:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a00120c:	f100 0320 	add.w	r3, r0, #32
1a001210:	4a09      	ldr	r2, [pc, #36]	; (1a001238 <Chip_Clock_GetRate+0x48>)
1a001212:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001216:	e7f4      	b.n	1a001202 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001218:	f7ff fe20 	bl	1a000e5c <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a00121c:	f7ff ffa9 	bl	1a001172 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001220:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001224:	d103      	bne.n	1a00122e <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001226:	2301      	movs	r3, #1
		rate = rate / div;
1a001228:	fbb0 f0f3 	udiv	r0, r0, r3
1a00122c:	e7ed      	b.n	1a00120a <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00122e:	2302      	movs	r3, #2
1a001230:	e7fa      	b.n	1a001228 <Chip_Clock_GetRate+0x38>
1a001232:	bf00      	nop
1a001234:	40052000 	.word	0x40052000
1a001238:	40051000 	.word	0x40051000

1a00123c <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a00123c:	4b09      	ldr	r3, [pc, #36]	; (1a001264 <Chip_UART_GetIndex+0x28>)
1a00123e:	4298      	cmp	r0, r3
1a001240:	d009      	beq.n	1a001256 <Chip_UART_GetIndex+0x1a>
1a001242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001246:	4298      	cmp	r0, r3
1a001248:	d007      	beq.n	1a00125a <Chip_UART_GetIndex+0x1e>
1a00124a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00124e:	4298      	cmp	r0, r3
1a001250:	d005      	beq.n	1a00125e <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a001252:	2000      	movs	r0, #0
1a001254:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a001256:	2002      	movs	r0, #2
1a001258:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00125a:	2003      	movs	r0, #3
1a00125c:	4770      	bx	lr
			return 1;
1a00125e:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a001260:	4770      	bx	lr
1a001262:	bf00      	nop
1a001264:	400c1000 	.word	0x400c1000

1a001268 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001268:	b530      	push	{r4, r5, lr}
1a00126a:	b083      	sub	sp, #12
1a00126c:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00126e:	f7ff ffe5 	bl	1a00123c <Chip_UART_GetIndex>
1a001272:	2301      	movs	r3, #1
1a001274:	461a      	mov	r2, r3
1a001276:	4619      	mov	r1, r3
1a001278:	4d0e      	ldr	r5, [pc, #56]	; (1a0012b4 <Chip_UART_Init+0x4c>)
1a00127a:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a00127e:	f7ff ff7f 	bl	1a001180 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a001282:	2307      	movs	r3, #7
1a001284:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a001286:	2300      	movs	r3, #0
1a001288:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00128a:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a00128c:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00128e:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001290:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a001292:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001294:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001296:	4b08      	ldr	r3, [pc, #32]	; (1a0012b8 <Chip_UART_Init+0x50>)
1a001298:	429c      	cmp	r4, r3
1a00129a:	d006      	beq.n	1a0012aa <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a00129c:	2303      	movs	r3, #3
1a00129e:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0012a0:	2310      	movs	r3, #16
1a0012a2:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0012a4:	9b01      	ldr	r3, [sp, #4]
}
1a0012a6:	b003      	add	sp, #12
1a0012a8:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0012aa:	2300      	movs	r3, #0
1a0012ac:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0012ae:	69a3      	ldr	r3, [r4, #24]
1a0012b0:	9301      	str	r3, [sp, #4]
1a0012b2:	e7f3      	b.n	1a00129c <Chip_UART_Init+0x34>
1a0012b4:	1a002398 	.word	0x1a002398
1a0012b8:	40082000 	.word	0x40082000

1a0012bc <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0012bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0012c0:	b083      	sub	sp, #12
1a0012c2:	9001      	str	r0, [sp, #4]
1a0012c4:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0012c6:	f7ff ffb9 	bl	1a00123c <Chip_UART_GetIndex>
1a0012ca:	4b32      	ldr	r3, [pc, #200]	; (1a001394 <Chip_UART_SetBaudFDR+0xd8>)
1a0012cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0012d0:	f7ff ff8e 	bl	1a0011f0 <Chip_Clock_GetRate>
1a0012d4:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a0012d6:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0012da:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0012dc:	f04f 0b00 	mov.w	fp, #0
1a0012e0:	46a2      	mov	sl, r4
1a0012e2:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0012e4:	e02a      	b.n	1a00133c <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0012e6:	4242      	negs	r2, r0
				div ++;
1a0012e8:	1c4b      	adds	r3, r1, #1
1a0012ea:	e017      	b.n	1a00131c <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0012ec:	b30a      	cbz	r2, 1a001332 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0012ee:	4617      	mov	r7, r2
			sd = d;
1a0012f0:	46ab      	mov	fp, r5
			sm = m;
1a0012f2:	46a2      	mov	sl, r4
			sdiv = div;
1a0012f4:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0012f6:	3501      	adds	r5, #1
1a0012f8:	42ac      	cmp	r4, r5
1a0012fa:	d91e      	bls.n	1a00133a <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0012fc:	0933      	lsrs	r3, r6, #4
1a0012fe:	0730      	lsls	r0, r6, #28
1a001300:	fba4 0100 	umull	r0, r1, r4, r0
1a001304:	fb04 1103 	mla	r1, r4, r3, r1
1a001308:	1962      	adds	r2, r4, r5
1a00130a:	fb08 f202 	mul.w	r2, r8, r2
1a00130e:	2300      	movs	r3, #0
1a001310:	f000 fddc 	bl	1a001ecc <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001314:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a001316:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a001318:	2800      	cmp	r0, #0
1a00131a:	dbe4      	blt.n	1a0012e6 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00131c:	4297      	cmp	r7, r2
1a00131e:	d3ea      	bcc.n	1a0012f6 <Chip_UART_SetBaudFDR+0x3a>
1a001320:	2b00      	cmp	r3, #0
1a001322:	d0e8      	beq.n	1a0012f6 <Chip_UART_SetBaudFDR+0x3a>
1a001324:	0c19      	lsrs	r1, r3, #16
1a001326:	d1e6      	bne.n	1a0012f6 <Chip_UART_SetBaudFDR+0x3a>
1a001328:	2b02      	cmp	r3, #2
1a00132a:	d8df      	bhi.n	1a0012ec <Chip_UART_SetBaudFDR+0x30>
1a00132c:	2d00      	cmp	r5, #0
1a00132e:	d0dd      	beq.n	1a0012ec <Chip_UART_SetBaudFDR+0x30>
1a001330:	e7e1      	b.n	1a0012f6 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a001332:	4617      	mov	r7, r2
			sd = d;
1a001334:	46ab      	mov	fp, r5
			sm = m;
1a001336:	46a2      	mov	sl, r4
			sdiv = div;
1a001338:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00133a:	3401      	adds	r4, #1
1a00133c:	b11f      	cbz	r7, 1a001346 <Chip_UART_SetBaudFDR+0x8a>
1a00133e:	2c0f      	cmp	r4, #15
1a001340:	d801      	bhi.n	1a001346 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a001342:	2500      	movs	r5, #0
1a001344:	e7d8      	b.n	1a0012f8 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a001346:	f1b9 0f00 	cmp.w	r9, #0
1a00134a:	d01e      	beq.n	1a00138a <Chip_UART_SetBaudFDR+0xce>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00134c:	9a01      	ldr	r2, [sp, #4]
1a00134e:	4611      	mov	r1, r2
1a001350:	68d3      	ldr	r3, [r2, #12]
1a001352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001356:	60d3      	str	r3, [r2, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001358:	fa5f f389 	uxtb.w	r3, r9
1a00135c:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a00135e:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a001362:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001364:	68d3      	ldr	r3, [r2, #12]
1a001366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00136a:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a00136c:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001370:	b2db      	uxtb	r3, r3
1a001372:	f00b 020f 	and.w	r2, fp, #15
1a001376:	4313      	orrs	r3, r2
1a001378:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00137a:	0933      	lsrs	r3, r6, #4
1a00137c:	fb0a f303 	mul.w	r3, sl, r3
1a001380:	44da      	add	sl, fp
1a001382:	fb09 f90a 	mul.w	r9, r9, sl
1a001386:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a00138a:	4648      	mov	r0, r9
1a00138c:	b003      	add	sp, #12
1a00138e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001392:	bf00      	nop
1a001394:	1a002390 	.word	0x1a002390

1a001398 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001398:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00139a:	4a0b      	ldr	r2, [pc, #44]	; (1a0013c8 <SystemInit+0x30>)
1a00139c:	4b0b      	ldr	r3, [pc, #44]	; (1a0013cc <SystemInit+0x34>)
1a00139e:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0013a0:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0013a4:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0013a6:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0013aa:	2b20      	cmp	r3, #32
1a0013ac:	d004      	beq.n	1a0013b8 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a0013ae:	f7ff f9c7 	bl	1a000740 <Board_SystemInit>
   Board_Init();
1a0013b2:	f7ff fa85 	bl	1a0008c0 <Board_Init>
#endif
}
1a0013b6:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0013b8:	4a04      	ldr	r2, [pc, #16]	; (1a0013cc <SystemInit+0x34>)
1a0013ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0013be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0013c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a0013c6:	e7f2      	b.n	1a0013ae <SystemInit+0x16>
1a0013c8:	1a000000 	.word	0x1a000000
1a0013cc:	e000ed00 	.word	0xe000ed00

1a0013d0 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a0013d0:	4b04      	ldr	r3, [pc, #16]	; (1a0013e4 <cyclesCounterInit+0x14>)
1a0013d2:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a0013d4:	4a04      	ldr	r2, [pc, #16]	; (1a0013e8 <cyclesCounterInit+0x18>)
1a0013d6:	6813      	ldr	r3, [r2, #0]
1a0013d8:	f043 0301 	orr.w	r3, r3, #1
1a0013dc:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0013de:	2001      	movs	r0, #1
1a0013e0:	4770      	bx	lr
1a0013e2:	bf00      	nop
1a0013e4:	10000038 	.word	0x10000038
1a0013e8:	e0001000 	.word	0xe0001000

1a0013ec <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0013ec:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0013ee:	4d0b      	ldr	r5, [pc, #44]	; (1a00141c <gpioObtainPinInit+0x30>)
1a0013f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0013f4:	182c      	adds	r4, r5, r0
1a0013f6:	5628      	ldrsb	r0, [r5, r0]
1a0013f8:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0013fa:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a0013fe:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001400:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001404:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001406:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00140a:	9b02      	ldr	r3, [sp, #8]
1a00140c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00140e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001412:	9b03      	ldr	r3, [sp, #12]
1a001414:	701a      	strb	r2, [r3, #0]
}
1a001416:	bc30      	pop	{r4, r5}
1a001418:	4770      	bx	lr
1a00141a:	bf00      	nop
1a00141c:	1a0023a0 	.word	0x1a0023a0

1a001420 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a001420:	f110 0f02 	cmn.w	r0, #2
1a001424:	f000 80c7 	beq.w	1a0015b6 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a001428:	f1b0 3fff 	cmp.w	r0, #4294967295
1a00142c:	f000 80c5 	beq.w	1a0015ba <gpioInit+0x19a>
{
1a001430:	b570      	push	{r4, r5, r6, lr}
1a001432:	b084      	sub	sp, #16
1a001434:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001436:	2300      	movs	r3, #0
1a001438:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00143c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001440:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001444:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001448:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00144c:	f10d 030b 	add.w	r3, sp, #11
1a001450:	9301      	str	r3, [sp, #4]
1a001452:	ab03      	add	r3, sp, #12
1a001454:	9300      	str	r3, [sp, #0]
1a001456:	f10d 030d 	add.w	r3, sp, #13
1a00145a:	f10d 020e 	add.w	r2, sp, #14
1a00145e:	f10d 010f 	add.w	r1, sp, #15
1a001462:	f7ff ffc3 	bl	1a0013ec <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001466:	2c05      	cmp	r4, #5
1a001468:	f200 80a9 	bhi.w	1a0015be <gpioInit+0x19e>
1a00146c:	e8df f004 	tbb	[pc, r4]
1a001470:	45278109 	.word	0x45278109
1a001474:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001476:	4853      	ldr	r0, [pc, #332]	; (1a0015c4 <gpioInit+0x1a4>)
1a001478:	f7ff fb82 	bl	1a000b80 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a00147c:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a00147e:	b004      	add	sp, #16
1a001480:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a001482:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001486:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00148a:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00148e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001492:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001496:	494c      	ldr	r1, [pc, #304]	; (1a0015c8 <gpioInit+0x1a8>)
1a001498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00149c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0014a0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0014a4:	2001      	movs	r0, #1
1a0014a6:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0014aa:	4c46      	ldr	r4, [pc, #280]	; (1a0015c4 <gpioInit+0x1a4>)
1a0014ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0014b0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0014b4:	ea22 0201 	bic.w	r2, r2, r1
1a0014b8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0014bc:	e7df      	b.n	1a00147e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0014be:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0014c2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0014c6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0014ca:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0014ce:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0014d2:	493d      	ldr	r1, [pc, #244]	; (1a0015c8 <gpioInit+0x1a8>)
1a0014d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0014d8:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0014dc:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0014e0:	2001      	movs	r0, #1
1a0014e2:	fa00 f102 	lsl.w	r1, r0, r2
1a0014e6:	4c37      	ldr	r4, [pc, #220]	; (1a0015c4 <gpioInit+0x1a4>)
1a0014e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0014ec:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0014f0:	ea22 0201 	bic.w	r2, r2, r1
1a0014f4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0014f8:	e7c1      	b.n	1a00147e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0014fa:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0014fe:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001502:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001506:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a00150a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00150e:	492e      	ldr	r1, [pc, #184]	; (1a0015c8 <gpioInit+0x1a8>)
1a001510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001514:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001518:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00151c:	2001      	movs	r0, #1
1a00151e:	fa00 f102 	lsl.w	r1, r0, r2
1a001522:	4c28      	ldr	r4, [pc, #160]	; (1a0015c4 <gpioInit+0x1a4>)
1a001524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001528:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00152c:	ea22 0201 	bic.w	r2, r2, r1
1a001530:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001534:	e7a3      	b.n	1a00147e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001536:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00153a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00153e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001542:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001546:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00154a:	491f      	ldr	r1, [pc, #124]	; (1a0015c8 <gpioInit+0x1a8>)
1a00154c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001550:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001554:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001558:	2001      	movs	r0, #1
1a00155a:	fa00 f102 	lsl.w	r1, r0, r2
1a00155e:	4c19      	ldr	r4, [pc, #100]	; (1a0015c4 <gpioInit+0x1a4>)
1a001560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001564:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001568:	ea22 0201 	bic.w	r2, r2, r1
1a00156c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001570:	e785      	b.n	1a00147e <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001572:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001576:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00157a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00157e:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001582:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001586:	4910      	ldr	r1, [pc, #64]	; (1a0015c8 <gpioInit+0x1a8>)
1a001588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a00158c:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001590:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001594:	2001      	movs	r0, #1
1a001596:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a00159a:	4b0a      	ldr	r3, [pc, #40]	; (1a0015c4 <gpioInit+0x1a4>)
1a00159c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0015a0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0015a4:	4331      	orrs	r1, r6
1a0015a6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0015aa:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0015ac:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0015b0:	2100      	movs	r1, #0
1a0015b2:	5499      	strb	r1, [r3, r2]
1a0015b4:	e763      	b.n	1a00147e <gpioInit+0x5e>
	  return FALSE;
1a0015b6:	2000      	movs	r0, #0
1a0015b8:	4770      	bx	lr
	  return FALSE;
1a0015ba:	2000      	movs	r0, #0
}
1a0015bc:	4770      	bx	lr
      ret_val = 0;
1a0015be:	2000      	movs	r0, #0
1a0015c0:	e75d      	b.n	1a00147e <gpioInit+0x5e>
1a0015c2:	bf00      	nop
1a0015c4:	400f4000 	.word	0x400f4000
1a0015c8:	40086000 	.word	0x40086000

1a0015cc <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0015cc:	f110 0f02 	cmn.w	r0, #2
1a0015d0:	d02d      	beq.n	1a00162e <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a0015d2:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0015d6:	d02c      	beq.n	1a001632 <gpioWrite+0x66>
{
1a0015d8:	b510      	push	{r4, lr}
1a0015da:	b084      	sub	sp, #16
1a0015dc:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0015de:	2300      	movs	r3, #0
1a0015e0:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0015e4:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0015e8:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0015ec:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0015f0:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0015f4:	f10d 030b 	add.w	r3, sp, #11
1a0015f8:	9301      	str	r3, [sp, #4]
1a0015fa:	ab03      	add	r3, sp, #12
1a0015fc:	9300      	str	r3, [sp, #0]
1a0015fe:	f10d 030d 	add.w	r3, sp, #13
1a001602:	f10d 020e 	add.w	r2, sp, #14
1a001606:	f10d 010f 	add.w	r1, sp, #15
1a00160a:	f7ff feef 	bl	1a0013ec <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00160e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001612:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001616:	1c21      	adds	r1, r4, #0
1a001618:	bf18      	it	ne
1a00161a:	2101      	movne	r1, #1
1a00161c:	015b      	lsls	r3, r3, #5
1a00161e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001622:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001626:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a001628:	2001      	movs	r0, #1
}
1a00162a:	b004      	add	sp, #16
1a00162c:	bd10      	pop	{r4, pc}
	  return FALSE;
1a00162e:	2000      	movs	r0, #0
1a001630:	4770      	bx	lr
	  return FALSE;
1a001632:	2000      	movs	r0, #0
}
1a001634:	4770      	bx	lr

1a001636 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a001636:	e7fe      	b.n	1a001636 <errorOcurred>

1a001638 <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a001638:	4770      	bx	lr
1a00163a:	Address 0x1a00163a is out of bounds.


1a00163c <Timer_Init>:
 * @return   nothing
 * @note   For the 'ticks' parameter, see function Timer_microsecondsToTicks
 */
void Timer_Init( uint8_t timerNumber, uint32_t ticks,
                 callBackFuncPtr_t voidFunctionPointer )
{
1a00163c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   /* Source:
   http://docs.lpcware.com/lpcopen/v1.03/lpc18xx__43xx_2examples_2periph_2periph__blinky_2blinky_8c_source.html */

   /*If timer period = CompareMatch0 Period = 0 => ERROR*/
   if (ticks==0) {
1a001640:	2900      	cmp	r1, #0
1a001642:	d077      	beq.n	1a001734 <Timer_Init+0xf8>
1a001644:	4605      	mov	r5, r0
1a001646:	4617      	mov	r7, r2
1a001648:	460e      	mov	r6, r1
      errorOcurred(0);
   }

   /* Enable timer clock and reset it */
   Chip_TIMER_Init(timer_sd[timerNumber].name);
1a00164a:	4604      	mov	r4, r0
1a00164c:	493e      	ldr	r1, [pc, #248]	; (1a001748 <Timer_Init+0x10c>)
1a00164e:	0043      	lsls	r3, r0, #1
1a001650:	4403      	add	r3, r0
1a001652:	009a      	lsls	r2, r3, #2
1a001654:	eb01 0802 	add.w	r8, r1, r2
1a001658:	5888      	ldr	r0, [r1, r2]
1a00165a:	f7ff faa9 	bl	1a000bb0 <Chip_TIMER_Init>
   Chip_RGU_TriggerReset(timer_sd[timerNumber].RGU);
1a00165e:	f898 3004 	ldrb.w	r3, [r8, #4]
 * @param	ResetNumber	: Peripheral reset number to trigger
 * @return	Nothing
 */
STATIC INLINE void Chip_RGU_TriggerReset(CHIP_RGU_RST_T ResetNumber)
{
	LPC_RGU->RESET_CTRL[ResetNumber >> 5] = 1 << (ResetNumber & 31);
1a001662:	f003 011f 	and.w	r1, r3, #31
1a001666:	095b      	lsrs	r3, r3, #5
1a001668:	2201      	movs	r2, #1
1a00166a:	408a      	lsls	r2, r1
1a00166c:	3340      	adds	r3, #64	; 0x40
1a00166e:	4937      	ldr	r1, [pc, #220]	; (1a00174c <Timer_Init+0x110>)
1a001670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   while (Chip_RGU_InReset(timer_sd[timerNumber].RGU)) {}
1a001674:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a001678:	009a      	lsls	r2, r3, #2
1a00167a:	4b33      	ldr	r3, [pc, #204]	; (1a001748 <Timer_Init+0x10c>)
1a00167c:	4413      	add	r3, r2
1a00167e:	791b      	ldrb	r3, [r3, #4]
 * @param	ResetNumber	: Peripheral reset number to trigger
 * @return	true if the periperal is still being reset
 */
STATIC INLINE bool Chip_RGU_InReset(CHIP_RGU_RST_T ResetNumber)
{
	return !(LPC_RGU->RESET_ACTIVE_STATUS[ResetNumber >> 5] & (1 << (ResetNumber & 31)));
1a001680:	095a      	lsrs	r2, r3, #5
1a001682:	3254      	adds	r2, #84	; 0x54
1a001684:	4931      	ldr	r1, [pc, #196]	; (1a00174c <Timer_Init+0x110>)
1a001686:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
1a00168a:	f003 031f 	and.w	r3, r3, #31
1a00168e:	2201      	movs	r2, #1
1a001690:	fa02 f303 	lsl.w	r3, r2, r3
1a001694:	4219      	tst	r1, r3
1a001696:	d0ed      	beq.n	1a001674 <Timer_Init+0x38>
   Chip_TIMER_Reset(timer_sd[timerNumber].name);
1a001698:	492b      	ldr	r1, [pc, #172]	; (1a001748 <Timer_Init+0x10c>)
1a00169a:	fa05 f302 	lsl.w	r3, r5, r2
1a00169e:	442b      	add	r3, r5
1a0016a0:	009a      	lsls	r2, r3, #2
1a0016a2:	eb01 0802 	add.w	r8, r1, r2
1a0016a6:	588c      	ldr	r4, [r1, r2]
1a0016a8:	4620      	mov	r0, r4
1a0016aa:	f7ff fa87 	bl	1a000bbc <Chip_TIMER_Reset>

   /* Update the defalut function pointer name of the Compare match 0*/
   timer_dd[timerNumber].timerCompareMatchFunctionPointer[TIMERCOMPAREMATCH0] = voidFunctionPointer;
1a0016ae:	012b      	lsls	r3, r5, #4
1a0016b0:	4a27      	ldr	r2, [pc, #156]	; (1a001750 <Timer_Init+0x114>)
1a0016b2:	50d7      	str	r7, [r2, r3]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchEnableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_INT_ON_MATCH(matchnum);
1a0016b4:	6963      	ldr	r3, [r4, #20]
1a0016b6:	f043 0301 	orr.w	r3, r3, #1
1a0016ba:	6163      	str	r3, [r4, #20]
	pTMR->MR[matchnum] = matchval; // matchval 0 to 4294967295 (uint32_t)
1a0016bc:	61a6      	str	r6, [r4, #24]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_ResetOnMatchEnable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_RESET_ON_MATCH(matchnum);
1a0016be:	6963      	ldr	r3, [r4, #20]
1a0016c0:	f043 0302 	orr.w	r3, r3, #2
1a0016c4:	6163      	str	r3, [r4, #20]
	pTMR->TCR |= TIMER_ENABLE;
1a0016c6:	6863      	ldr	r3, [r4, #4]
1a0016c8:	f043 0301 	orr.w	r3, r3, #1
1a0016cc:	6063      	str	r3, [r4, #4]

   /*Enable timer*/
   Chip_TIMER_Enable(timer_sd[timerNumber].name);

   /* Enable timer interrupt */
   NVIC_SetPriority(timer_sd[timerNumber].IRQn, MAX_SYSCALL_INTERRUPT_PRIORITY+1);
1a0016ce:	f8d8 2008 	ldr.w	r2, [r8, #8]
1a0016d2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
1a0016d4:	2b00      	cmp	r3, #0
1a0016d6:	db30      	blt.n	1a00173a <Timer_Init+0xfe>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0016d8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a0016dc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a0016e0:	22c0      	movs	r2, #192	; 0xc0
1a0016e2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
   NVIC_EnableIRQ(timer_sd[timerNumber].IRQn);
1a0016e6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a0016ea:	009a      	lsls	r2, r3, #2
1a0016ec:	4b16      	ldr	r3, [pc, #88]	; (1a001748 <Timer_Init+0x10c>)
1a0016ee:	4413      	add	r3, r2
1a0016f0:	689a      	ldr	r2, [r3, #8]
1a0016f2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
1a0016f4:	2b00      	cmp	r3, #0
1a0016f6:	db08      	blt.n	1a00170a <Timer_Init+0xce>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a0016f8:	f002 021f 	and.w	r2, r2, #31
1a0016fc:	095b      	lsrs	r3, r3, #5
1a0016fe:	2101      	movs	r1, #1
1a001700:	fa01 f202 	lsl.w	r2, r1, r2
1a001704:	4913      	ldr	r1, [pc, #76]	; (1a001754 <Timer_Init+0x118>)
1a001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   NVIC_ClearPendingIRQ(timer_sd[timerNumber].IRQn);
1a00170a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1a00170e:	00aa      	lsls	r2, r5, #2
1a001710:	4b0d      	ldr	r3, [pc, #52]	; (1a001748 <Timer_Init+0x10c>)
1a001712:	4413      	add	r3, r2
1a001714:	689a      	ldr	r2, [r3, #8]
1a001716:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
1a001718:	2b00      	cmp	r3, #0
1a00171a:	db09      	blt.n	1a001730 <Timer_Init+0xf4>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00171c:	f002 021f 	and.w	r2, r2, #31
1a001720:	095b      	lsrs	r3, r3, #5
1a001722:	2101      	movs	r1, #1
1a001724:	fa01 f202 	lsl.w	r2, r1, r2
1a001728:	3360      	adds	r3, #96	; 0x60
1a00172a:	490a      	ldr	r1, [pc, #40]	; (1a001754 <Timer_Init+0x118>)
1a00172c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
1a001730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      errorOcurred(0);
1a001734:	2000      	movs	r0, #0
1a001736:	f7ff ff7e 	bl	1a001636 <errorOcurred>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a00173a:	f002 020f 	and.w	r2, r2, #15
1a00173e:	4b06      	ldr	r3, [pc, #24]	; (1a001758 <Timer_Init+0x11c>)
1a001740:	4413      	add	r3, r2
1a001742:	22c0      	movs	r2, #192	; 0xc0
1a001744:	761a      	strb	r2, [r3, #24]
1a001746:	e7ce      	b.n	1a0016e6 <Timer_Init+0xaa>
1a001748:	1a002488 	.word	0x1a002488
1a00174c:	40053000 	.word	0x40053000
1a001750:	1000003c 	.word	0x1000003c
1a001754:	e000e100 	.word	0xe000e100
1a001758:	e000ecfc 	.word	0xe000ecfc

1a00175c <Timer_microsecondsToTicks>:
 * @note   Can be used for the second parameter in the Timer_init
 */
uint32_t Timer_microsecondsToTicks( uint32_t uS )
{
   return (uS*(LPC4337_MAX_FREC/1000000));
}
1a00175c:	23cc      	movs	r3, #204	; 0xcc
1a00175e:	fb03 f000 	mul.w	r0, r3, r0
1a001762:	4770      	bx	lr

1a001764 <Timer_EnableCompareMatch>:
 * @note   For the 'ticks' parameter, see function Timer_microsecondsToTicks
 */
void Timer_EnableCompareMatch( uint8_t timerNumber, uint8_t compareMatchNumber,
                               uint32_t ticks,
                               callBackFuncPtr_t voidFunctionPointer )
{
1a001764:	b430      	push	{r4, r5}

   timer_dd[timerNumber].timerCompareMatchFunctionPointer[compareMatchNumber] = voidFunctionPointer;
1a001766:	eb01 0580 	add.w	r5, r1, r0, lsl #2
1a00176a:	4c0a      	ldr	r4, [pc, #40]	; (1a001794 <Timer_EnableCompareMatch+0x30>)
1a00176c:	f844 3025 	str.w	r3, [r4, r5, lsl #2]

   Chip_TIMER_MatchEnableInt(timer_sd[timerNumber].name, compareMatchNumber);
1a001770:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001774:	0083      	lsls	r3, r0, #2
1a001776:	4808      	ldr	r0, [pc, #32]	; (1a001798 <Timer_EnableCompareMatch+0x34>)
1a001778:	58c3      	ldr	r3, [r0, r3]
1a00177a:	b249      	sxtb	r1, r1
	pTMR->MCR |= TIMER_INT_ON_MATCH(matchnum);
1a00177c:	6958      	ldr	r0, [r3, #20]
1a00177e:	eb01 0541 	add.w	r5, r1, r1, lsl #1
1a001782:	2401      	movs	r4, #1
1a001784:	40ac      	lsls	r4, r5
1a001786:	4320      	orrs	r0, r4
1a001788:	6158      	str	r0, [r3, #20]
	pTMR->MR[matchnum] = matchval; // matchval 0 to 4294967295 (uint32_t)
1a00178a:	3106      	adds	r1, #6
1a00178c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
   Chip_TIMER_SetMatch(timer_sd[timerNumber].name, compareMatchNumber, ticks);
}
1a001790:	bc30      	pop	{r4, r5}
1a001792:	4770      	bx	lr
1a001794:	1000003c 	.word	0x1000003c
1a001798:	1a002488 	.word	0x1a002488

1a00179c <Timer_DisableCompareMatch>:
 * @param   compareMatchNumber:   Compare match number, 1 to 3
 * @return   None
 */
void Timer_DisableCompareMatch( uint8_t timerNumber,
                                uint8_t compareMatchNumber )
{
1a00179c:	b410      	push	{r4}

   timer_dd[timerNumber].timerCompareMatchFunctionPointer[compareMatchNumber] = doNothing;
1a00179e:	eb01 0280 	add.w	r2, r1, r0, lsl #2
1a0017a2:	4b0c      	ldr	r3, [pc, #48]	; (1a0017d4 <Timer_DisableCompareMatch+0x38>)
1a0017a4:	4c0c      	ldr	r4, [pc, #48]	; (1a0017d8 <Timer_DisableCompareMatch+0x3c>)
1a0017a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]

   Chip_TIMER_ClearMatch(timer_sd[timerNumber].name, compareMatchNumber);
1a0017aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0017ae:	0083      	lsls	r3, r0, #2
1a0017b0:	4a0a      	ldr	r2, [pc, #40]	; (1a0017dc <Timer_DisableCompareMatch+0x40>)
1a0017b2:	58d2      	ldr	r2, [r2, r3]
1a0017b4:	b249      	sxtb	r1, r1
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0017b6:	2301      	movs	r3, #1
1a0017b8:	fa03 f001 	lsl.w	r0, r3, r1
1a0017bc:	6010      	str	r0, [r2, #0]
	pTMR->MCR &= ~TIMER_INT_ON_MATCH(matchnum);
1a0017be:	6950      	ldr	r0, [r2, #20]
1a0017c0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
1a0017c4:	fa03 f101 	lsl.w	r1, r3, r1
1a0017c8:	ea20 0101 	bic.w	r1, r0, r1
1a0017cc:	6151      	str	r1, [r2, #20]
   Chip_TIMER_MatchDisableInt(timer_sd[timerNumber].name, compareMatchNumber);
}
1a0017ce:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0017d2:	4770      	bx	lr
1a0017d4:	1000003c 	.word	0x1000003c
1a0017d8:	1a001639 	.word	0x1a001639
1a0017dc:	1a002488 	.word	0x1a002488

1a0017e0 <Timer_SetCompareMatch>:
 */
void Timer_SetCompareMatch( uint8_t timerNumber,
                            uint8_t compareMatchNumber,
                            uint32_t ticks )
{
   Chip_TIMER_SetMatch(timer_sd[timerNumber].name, compareMatchNumber,ticks);
1a0017e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0017e4:	0083      	lsls	r3, r0, #2
1a0017e6:	4803      	ldr	r0, [pc, #12]	; (1a0017f4 <Timer_SetCompareMatch+0x14>)
1a0017e8:	58c3      	ldr	r3, [r0, r3]
1a0017ea:	b249      	sxtb	r1, r1
	pTMR->MR[matchnum] = matchval; // matchval 0 to 4294967295 (uint32_t)
1a0017ec:	3106      	adds	r1, #6
1a0017ee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
1a0017f2:	4770      	bx	lr
1a0017f4:	1a002488 	.word	0x1a002488

1a0017f8 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0017f8:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0017fa:	2400      	movs	r4, #0
1a0017fc:	e001      	b.n	1a001802 <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0017fe:	3401      	adds	r4, #1
1a001800:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001802:	2c03      	cmp	r4, #3
1a001804:	d812      	bhi.n	1a00182c <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a001806:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001808:	4b09      	ldr	r3, [pc, #36]	; (1a001830 <TIMER0_IRQHandler+0x38>)
1a00180a:	681a      	ldr	r2, [r3, #0]
1a00180c:	f004 010f 	and.w	r1, r4, #15
1a001810:	2301      	movs	r3, #1
1a001812:	408b      	lsls	r3, r1
1a001814:	421a      	tst	r2, r3
1a001816:	d0f2      	beq.n	1a0017fe <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001818:	4b06      	ldr	r3, [pc, #24]	; (1a001834 <TIMER0_IRQHandler+0x3c>)
1a00181a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a00181e:	2000      	movs	r0, #0
1a001820:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001822:	2301      	movs	r3, #1
1a001824:	40ab      	lsls	r3, r5
1a001826:	4a02      	ldr	r2, [pc, #8]	; (1a001830 <TIMER0_IRQHandler+0x38>)
1a001828:	6013      	str	r3, [r2, #0]
1a00182a:	e7e8      	b.n	1a0017fe <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a00182c:	bd38      	pop	{r3, r4, r5, pc}
1a00182e:	bf00      	nop
1a001830:	40084000 	.word	0x40084000
1a001834:	1000003c 	.word	0x1000003c

1a001838 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a001838:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00183a:	2400      	movs	r4, #0
1a00183c:	e001      	b.n	1a001842 <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00183e:	3401      	adds	r4, #1
1a001840:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001842:	2c03      	cmp	r4, #3
1a001844:	d813      	bhi.n	1a00186e <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a001846:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001848:	4b09      	ldr	r3, [pc, #36]	; (1a001870 <TIMER1_IRQHandler+0x38>)
1a00184a:	681a      	ldr	r2, [r3, #0]
1a00184c:	f004 010f 	and.w	r1, r4, #15
1a001850:	2301      	movs	r3, #1
1a001852:	408b      	lsls	r3, r1
1a001854:	421a      	tst	r2, r3
1a001856:	d0f2      	beq.n	1a00183e <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001858:	1d23      	adds	r3, r4, #4
1a00185a:	4a06      	ldr	r2, [pc, #24]	; (1a001874 <TIMER1_IRQHandler+0x3c>)
1a00185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001860:	2000      	movs	r0, #0
1a001862:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001864:	2301      	movs	r3, #1
1a001866:	40ab      	lsls	r3, r5
1a001868:	4a01      	ldr	r2, [pc, #4]	; (1a001870 <TIMER1_IRQHandler+0x38>)
1a00186a:	6013      	str	r3, [r2, #0]
1a00186c:	e7e7      	b.n	1a00183e <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00186e:	bd38      	pop	{r3, r4, r5, pc}
1a001870:	40085000 	.word	0x40085000
1a001874:	1000003c 	.word	0x1000003c

1a001878 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a001878:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00187a:	2400      	movs	r4, #0
1a00187c:	e001      	b.n	1a001882 <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00187e:	3401      	adds	r4, #1
1a001880:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001882:	2c03      	cmp	r4, #3
1a001884:	d814      	bhi.n	1a0018b0 <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a001886:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001888:	4b0a      	ldr	r3, [pc, #40]	; (1a0018b4 <TIMER2_IRQHandler+0x3c>)
1a00188a:	681a      	ldr	r2, [r3, #0]
1a00188c:	f004 010f 	and.w	r1, r4, #15
1a001890:	2301      	movs	r3, #1
1a001892:	408b      	lsls	r3, r1
1a001894:	421a      	tst	r2, r3
1a001896:	d0f2      	beq.n	1a00187e <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001898:	f104 0308 	add.w	r3, r4, #8
1a00189c:	4a06      	ldr	r2, [pc, #24]	; (1a0018b8 <TIMER2_IRQHandler+0x40>)
1a00189e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0018a2:	2000      	movs	r0, #0
1a0018a4:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0018a6:	2301      	movs	r3, #1
1a0018a8:	40ab      	lsls	r3, r5
1a0018aa:	4a02      	ldr	r2, [pc, #8]	; (1a0018b4 <TIMER2_IRQHandler+0x3c>)
1a0018ac:	6013      	str	r3, [r2, #0]
1a0018ae:	e7e6      	b.n	1a00187e <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0018b0:	bd38      	pop	{r3, r4, r5, pc}
1a0018b2:	bf00      	nop
1a0018b4:	400c3000 	.word	0x400c3000
1a0018b8:	1000003c 	.word	0x1000003c

1a0018bc <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0018bc:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0018be:	2400      	movs	r4, #0
1a0018c0:	e001      	b.n	1a0018c6 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0018c2:	3401      	adds	r4, #1
1a0018c4:	b2e4      	uxtb	r4, r4
   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0018c6:	2c03      	cmp	r4, #3
1a0018c8:	d814      	bhi.n	1a0018f4 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0018ca:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0018cc:	4b0a      	ldr	r3, [pc, #40]	; (1a0018f8 <TIMER3_IRQHandler+0x3c>)
1a0018ce:	681a      	ldr	r2, [r3, #0]
1a0018d0:	f004 010f 	and.w	r1, r4, #15
1a0018d4:	2301      	movs	r3, #1
1a0018d6:	408b      	lsls	r3, r1
1a0018d8:	421a      	tst	r2, r3
1a0018da:	d0f2      	beq.n	1a0018c2 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0018dc:	f104 030c 	add.w	r3, r4, #12
1a0018e0:	4a06      	ldr	r2, [pc, #24]	; (1a0018fc <TIMER3_IRQHandler+0x40>)
1a0018e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0018e6:	2000      	movs	r0, #0
1a0018e8:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0018ea:	2301      	movs	r3, #1
1a0018ec:	40ab      	lsls	r3, r5
1a0018ee:	4a02      	ldr	r2, [pc, #8]	; (1a0018f8 <TIMER3_IRQHandler+0x3c>)
1a0018f0:	6013      	str	r3, [r2, #0]
1a0018f2:	e7e6      	b.n	1a0018c2 <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0018f4:	bd38      	pop	{r3, r4, r5, pc}
1a0018f6:	bf00      	nop
1a0018f8:	400c4000 	.word	0x400c4000
1a0018fc:	1000003c 	.word	0x1000003c

1a001900 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a001900:	4b01      	ldr	r3, [pc, #4]	; (1a001908 <tickRead+0x8>)
1a001902:	e9d3 0100 	ldrd	r0, r1, [r3]
1a001906:	4770      	bx	lr
1a001908:	100000e0 	.word	0x100000e0

1a00190c <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a00190c:	b118      	cbz	r0, 1a001916 <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a00190e:	4b04      	ldr	r3, [pc, #16]	; (1a001920 <tickPowerSet+0x14>)
1a001910:	2207      	movs	r2, #7
1a001912:	601a      	str	r2, [r3, #0]
1a001914:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a001916:	4b02      	ldr	r3, [pc, #8]	; (1a001920 <tickPowerSet+0x14>)
1a001918:	2200      	movs	r2, #0
1a00191a:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a00191c:	4770      	bx	lr
1a00191e:	bf00      	nop
1a001920:	e000e010 	.word	0xe000e010

1a001924 <tickInit>:
{
1a001924:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a001926:	ea50 0401 	orrs.w	r4, r0, r1
1a00192a:	d02a      	beq.n	1a001982 <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a00192c:	f110 32ff 	adds.w	r2, r0, #4294967295
1a001930:	f141 33ff 	adc.w	r3, r1, #4294967295
1a001934:	2b00      	cmp	r3, #0
1a001936:	bf08      	it	eq
1a001938:	2a32      	cmpeq	r2, #50	; 0x32
1a00193a:	d227      	bcs.n	1a00198c <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a00193c:	4b14      	ldr	r3, [pc, #80]	; (1a001990 <tickInit+0x6c>)
1a00193e:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001942:	4b14      	ldr	r3, [pc, #80]	; (1a001994 <tickInit+0x70>)
1a001944:	681b      	ldr	r3, [r3, #0]
1a001946:	fba3 4500 	umull	r4, r5, r3, r0
1a00194a:	fb03 5501 	mla	r5, r3, r1, r5
1a00194e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001952:	2300      	movs	r3, #0
1a001954:	4620      	mov	r0, r4
1a001956:	4629      	mov	r1, r5
1a001958:	f000 fab8 	bl	1a001ecc <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a00195c:	3801      	subs	r0, #1
1a00195e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001962:	d209      	bcs.n	1a001978 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001964:	4b0c      	ldr	r3, [pc, #48]	; (1a001998 <tickInit+0x74>)
1a001966:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001968:	4a0c      	ldr	r2, [pc, #48]	; (1a00199c <tickInit+0x78>)
1a00196a:	21e0      	movs	r1, #224	; 0xe0
1a00196c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001970:	2200      	movs	r2, #0
1a001972:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001974:	2207      	movs	r2, #7
1a001976:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001978:	2001      	movs	r0, #1
1a00197a:	f7ff ffc7 	bl	1a00190c <tickPowerSet>
      bool_t ret_val = 1;
1a00197e:	2001      	movs	r0, #1
}
1a001980:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a001982:	2000      	movs	r0, #0
1a001984:	f7ff ffc2 	bl	1a00190c <tickPowerSet>
         ret_val = 0;
1a001988:	2000      	movs	r0, #0
1a00198a:	e7f9      	b.n	1a001980 <tickInit+0x5c>
            ret_val = 0;
1a00198c:	2000      	movs	r0, #0
1a00198e:	e7f7      	b.n	1a001980 <tickInit+0x5c>
1a001990:	10000080 	.word	0x10000080
1a001994:	10000120 	.word	0x10000120
1a001998:	e000e010 	.word	0xe000e010
1a00199c:	e000ed00 	.word	0xe000ed00

1a0019a0 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0019a0:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a0019a2:	4a07      	ldr	r2, [pc, #28]	; (1a0019c0 <SysTick_Handler+0x20>)
1a0019a4:	6813      	ldr	r3, [r2, #0]
1a0019a6:	6851      	ldr	r1, [r2, #4]
1a0019a8:	3301      	adds	r3, #1
1a0019aa:	f141 0100 	adc.w	r1, r1, #0
1a0019ae:	6013      	str	r3, [r2, #0]
1a0019b0:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0019b2:	4b04      	ldr	r3, [pc, #16]	; (1a0019c4 <SysTick_Handler+0x24>)
1a0019b4:	681b      	ldr	r3, [r3, #0]
1a0019b6:	b113      	cbz	r3, 1a0019be <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a0019b8:	4a03      	ldr	r2, [pc, #12]	; (1a0019c8 <SysTick_Handler+0x28>)
1a0019ba:	6810      	ldr	r0, [r2, #0]
1a0019bc:	4798      	blx	r3
   }
}
1a0019be:	bd08      	pop	{r3, pc}
1a0019c0:	100000e0 	.word	0x100000e0
1a0019c4:	100000e8 	.word	0x100000e8
1a0019c8:	100000d8 	.word	0x100000d8

1a0019cc <uartProcessIRQ>:
{
1a0019cc:	b570      	push	{r4, r5, r6, lr}
1a0019ce:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a0019d0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a0019d4:	0093      	lsls	r3, r2, #2
1a0019d6:	4a22      	ldr	r2, [pc, #136]	; (1a001a60 <uartProcessIRQ+0x94>)
1a0019d8:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0019da:	6975      	ldr	r5, [r6, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a0019dc:	b2ed      	uxtb	r5, r5
1a0019de:	f015 0f01 	tst.w	r5, #1
1a0019e2:	d00a      	beq.n	1a0019fa <uartProcessIRQ+0x2e>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a0019e4:	b928      	cbnz	r0, 1a0019f2 <uartProcessIRQ+0x26>
1a0019e6:	4b1f      	ldr	r3, [pc, #124]	; (1a001a64 <uartProcessIRQ+0x98>)
1a0019e8:	681b      	ldr	r3, [r3, #0]
1a0019ea:	b113      	cbz	r3, 1a0019f2 <uartProcessIRQ+0x26>
         (*rxIsrCallbackUART0)(rxIsrCallbackUART0Params);
1a0019ec:	4a1e      	ldr	r2, [pc, #120]	; (1a001a68 <uartProcessIRQ+0x9c>)
1a0019ee:	6810      	ldr	r0, [r2, #0]
1a0019f0:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0019f2:	2c03      	cmp	r4, #3
1a0019f4:	d014      	beq.n	1a001a20 <uartProcessIRQ+0x54>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0019f6:	2c05      	cmp	r4, #5
1a0019f8:	d01a      	beq.n	1a001a30 <uartProcessIRQ+0x64>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a0019fa:	f015 0f20 	tst.w	r5, #32
1a0019fe:	d00e      	beq.n	1a001a1e <uartProcessIRQ+0x52>
	return pUART->IER;
1a001a00:	6873      	ldr	r3, [r6, #4]
1a001a02:	f013 0f02 	tst.w	r3, #2
1a001a06:	d00a      	beq.n	1a001a1e <uartProcessIRQ+0x52>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a001a08:	b92c      	cbnz	r4, 1a001a16 <uartProcessIRQ+0x4a>
1a001a0a:	4b18      	ldr	r3, [pc, #96]	; (1a001a6c <uartProcessIRQ+0xa0>)
1a001a0c:	681b      	ldr	r3, [r3, #0]
1a001a0e:	b113      	cbz	r3, 1a001a16 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART0)(txIsrCallbackUART0Params);
1a001a10:	4a17      	ldr	r2, [pc, #92]	; (1a001a70 <uartProcessIRQ+0xa4>)
1a001a12:	6810      	ldr	r0, [r2, #0]
1a001a14:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a001a16:	2c03      	cmp	r4, #3
1a001a18:	d012      	beq.n	1a001a40 <uartProcessIRQ+0x74>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a001a1a:	2c05      	cmp	r4, #5
1a001a1c:	d018      	beq.n	1a001a50 <uartProcessIRQ+0x84>
}
1a001a1e:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a001a20:	4b14      	ldr	r3, [pc, #80]	; (1a001a74 <uartProcessIRQ+0xa8>)
1a001a22:	681b      	ldr	r3, [r3, #0]
1a001a24:	2b00      	cmp	r3, #0
1a001a26:	d0e6      	beq.n	1a0019f6 <uartProcessIRQ+0x2a>
         (*rxIsrCallbackUART2)(rxIsrCallbackUART2Params);
1a001a28:	4a13      	ldr	r2, [pc, #76]	; (1a001a78 <uartProcessIRQ+0xac>)
1a001a2a:	6810      	ldr	r0, [r2, #0]
1a001a2c:	4798      	blx	r3
1a001a2e:	e7e2      	b.n	1a0019f6 <uartProcessIRQ+0x2a>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a001a30:	4b12      	ldr	r3, [pc, #72]	; (1a001a7c <uartProcessIRQ+0xb0>)
1a001a32:	681b      	ldr	r3, [r3, #0]
1a001a34:	2b00      	cmp	r3, #0
1a001a36:	d0e0      	beq.n	1a0019fa <uartProcessIRQ+0x2e>
         (*rxIsrCallbackUART3)(rxIsrCallbackUART3Params);
1a001a38:	4a11      	ldr	r2, [pc, #68]	; (1a001a80 <uartProcessIRQ+0xb4>)
1a001a3a:	6810      	ldr	r0, [r2, #0]
1a001a3c:	4798      	blx	r3
1a001a3e:	e7dc      	b.n	1a0019fa <uartProcessIRQ+0x2e>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a001a40:	4b10      	ldr	r3, [pc, #64]	; (1a001a84 <uartProcessIRQ+0xb8>)
1a001a42:	681b      	ldr	r3, [r3, #0]
1a001a44:	2b00      	cmp	r3, #0
1a001a46:	d0e8      	beq.n	1a001a1a <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART2)(txIsrCallbackUART2Params);
1a001a48:	4a0f      	ldr	r2, [pc, #60]	; (1a001a88 <uartProcessIRQ+0xbc>)
1a001a4a:	6810      	ldr	r0, [r2, #0]
1a001a4c:	4798      	blx	r3
1a001a4e:	e7e4      	b.n	1a001a1a <uartProcessIRQ+0x4e>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a001a50:	4b0e      	ldr	r3, [pc, #56]	; (1a001a8c <uartProcessIRQ+0xc0>)
1a001a52:	681b      	ldr	r3, [r3, #0]
1a001a54:	2b00      	cmp	r3, #0
1a001a56:	d0e2      	beq.n	1a001a1e <uartProcessIRQ+0x52>
         (*txIsrCallbackUART3)(txIsrCallbackUART3Params);
1a001a58:	4a0d      	ldr	r2, [pc, #52]	; (1a001a90 <uartProcessIRQ+0xc4>)
1a001a5a:	6810      	ldr	r0, [r2, #0]
1a001a5c:	4798      	blx	r3
}
1a001a5e:	e7de      	b.n	1a001a1e <uartProcessIRQ+0x52>
1a001a60:	1a0024b8 	.word	0x1a0024b8
1a001a64:	100000ec 	.word	0x100000ec
1a001a68:	100000f0 	.word	0x100000f0
1a001a6c:	10000104 	.word	0x10000104
1a001a70:	10000108 	.word	0x10000108
1a001a74:	100000f4 	.word	0x100000f4
1a001a78:	100000f8 	.word	0x100000f8
1a001a7c:	100000fc 	.word	0x100000fc
1a001a80:	10000100 	.word	0x10000100
1a001a84:	1000010c 	.word	0x1000010c
1a001a88:	10000110 	.word	0x10000110
1a001a8c:	10000114 	.word	0x10000114
1a001a90:	10000118 	.word	0x10000118

1a001a94 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a001a94:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a001a96:	2003      	movs	r0, #3
1a001a98:	f7ff ff98 	bl	1a0019cc <uartProcessIRQ>
}
1a001a9c:	bd08      	pop	{r3, pc}

1a001a9e <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a001a9e:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a001aa0:	2005      	movs	r0, #5
1a001aa2:	f7ff ff93 	bl	1a0019cc <uartProcessIRQ>
}
1a001aa6:	bd08      	pop	{r3, pc}

1a001aa8 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001aa8:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001aaa:	4b04      	ldr	r3, [pc, #16]	; (1a001abc <USB0_IRQHandler+0x14>)
1a001aac:	681b      	ldr	r3, [r3, #0]
1a001aae:	681b      	ldr	r3, [r3, #0]
1a001ab0:	68db      	ldr	r3, [r3, #12]
1a001ab2:	4a03      	ldr	r2, [pc, #12]	; (1a001ac0 <USB0_IRQHandler+0x18>)
1a001ab4:	6810      	ldr	r0, [r2, #0]
1a001ab6:	4798      	blx	r3
}
1a001ab8:	bd08      	pop	{r3, pc}
1a001aba:	bf00      	nop
1a001abc:	10000124 	.word	0x10000124
1a001ac0:	1000011c 	.word	0x1000011c

1a001ac4 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001ac4:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001ac6:	f7ff f8e9 	bl	1a000c9c <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001aca:	4b1a      	ldr	r3, [pc, #104]	; (1a001b34 <boardInit+0x70>)
1a001acc:	6818      	ldr	r0, [r3, #0]
1a001ace:	f7ff fc7f 	bl	1a0013d0 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001ad2:	2001      	movs	r0, #1
1a001ad4:	2100      	movs	r1, #0
1a001ad6:	f7ff ff25 	bl	1a001924 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001ada:	2105      	movs	r1, #5
1a001adc:	2000      	movs	r0, #0
1a001ade:	f7ff fc9f 	bl	1a001420 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001ae2:	2100      	movs	r1, #0
1a001ae4:	2024      	movs	r0, #36	; 0x24
1a001ae6:	f7ff fc9b 	bl	1a001420 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001aea:	2100      	movs	r1, #0
1a001aec:	2025      	movs	r0, #37	; 0x25
1a001aee:	f7ff fc97 	bl	1a001420 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001af2:	2100      	movs	r1, #0
1a001af4:	2026      	movs	r0, #38	; 0x26
1a001af6:	f7ff fc93 	bl	1a001420 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001afa:	2100      	movs	r1, #0
1a001afc:	2027      	movs	r0, #39	; 0x27
1a001afe:	f7ff fc8f 	bl	1a001420 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001b02:	2101      	movs	r1, #1
1a001b04:	2028      	movs	r0, #40	; 0x28
1a001b06:	f7ff fc8b 	bl	1a001420 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001b0a:	2101      	movs	r1, #1
1a001b0c:	2029      	movs	r0, #41	; 0x29
1a001b0e:	f7ff fc87 	bl	1a001420 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001b12:	2101      	movs	r1, #1
1a001b14:	202a      	movs	r0, #42	; 0x2a
1a001b16:	f7ff fc83 	bl	1a001420 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001b1a:	2101      	movs	r1, #1
1a001b1c:	202b      	movs	r0, #43	; 0x2b
1a001b1e:	f7ff fc7f 	bl	1a001420 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001b22:	2101      	movs	r1, #1
1a001b24:	202c      	movs	r0, #44	; 0x2c
1a001b26:	f7ff fc7b 	bl	1a001420 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001b2a:	2101      	movs	r1, #1
1a001b2c:	202d      	movs	r0, #45	; 0x2d
1a001b2e:	f7ff fc77 	bl	1a001420 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001b32:	bd08      	pop	{r3, pc}
1a001b34:	10000120 	.word	0x10000120

1a001b38 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a001b38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001b3c:	4680      	mov	r8, r0
1a001b3e:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a001b40:	f7ff fede 	bl	1a001900 <tickRead>
1a001b44:	4606      	mov	r6, r0
1a001b46:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a001b48:	f7ff feda 	bl	1a001900 <tickRead>
1a001b4c:	1b84      	subs	r4, r0, r6
1a001b4e:	eb61 0507 	sbc.w	r5, r1, r7
1a001b52:	4b06      	ldr	r3, [pc, #24]	; (1a001b6c <delay+0x34>)
1a001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001b58:	4640      	mov	r0, r8
1a001b5a:	4649      	mov	r1, r9
1a001b5c:	f000 f9b6 	bl	1a001ecc <__aeabi_uldivmod>
1a001b60:	428d      	cmp	r5, r1
1a001b62:	bf08      	it	eq
1a001b64:	4284      	cmpeq	r4, r0
1a001b66:	d3ef      	bcc.n	1a001b48 <delay+0x10>
}
1a001b68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001b6c:	10000080 	.word	0x10000080

1a001b70 <timer1CompareMatch1func>:
      }
   }
}

void timer1CompareMatch1func( void* ptr )
{
1a001b70:	b508      	push	{r3, lr}
   gpioWrite(servoMap[AttachedServoList[0].servo],FALSE);
1a001b72:	4b04      	ldr	r3, [pc, #16]	; (1a001b84 <timer1CompareMatch1func+0x14>)
1a001b74:	781b      	ldrb	r3, [r3, #0]
1a001b76:	2100      	movs	r1, #0
1a001b78:	4a03      	ldr	r2, [pc, #12]	; (1a001b88 <timer1CompareMatch1func+0x18>)
1a001b7a:	56d0      	ldrsb	r0, [r2, r3]
1a001b7c:	f7ff fd26 	bl	1a0015cc <gpioWrite>
}
1a001b80:	bd08      	pop	{r3, pc}
1a001b82:	bf00      	nop
1a001b84:	10000088 	.word	0x10000088
1a001b88:	1a002500 	.word	0x1a002500

1a001b8c <timer1CompareMatch2func>:

void timer1CompareMatch2func( void* ptr )
{
1a001b8c:	b508      	push	{r3, lr}
   gpioWrite(servoMap[AttachedServoList[1].servo],FALSE);
1a001b8e:	4b04      	ldr	r3, [pc, #16]	; (1a001ba0 <timer1CompareMatch2func+0x14>)
1a001b90:	7a1b      	ldrb	r3, [r3, #8]
1a001b92:	2100      	movs	r1, #0
1a001b94:	4a03      	ldr	r2, [pc, #12]	; (1a001ba4 <timer1CompareMatch2func+0x18>)
1a001b96:	56d0      	ldrsb	r0, [r2, r3]
1a001b98:	f7ff fd18 	bl	1a0015cc <gpioWrite>
}
1a001b9c:	bd08      	pop	{r3, pc}
1a001b9e:	bf00      	nop
1a001ba0:	10000088 	.word	0x10000088
1a001ba4:	1a002500 	.word	0x1a002500

1a001ba8 <timer1CompareMatch3func>:

void timer1CompareMatch3func( void* ptr )
{
1a001ba8:	b508      	push	{r3, lr}
   gpioWrite(servoMap[AttachedServoList[2].servo],FALSE);
1a001baa:	4b04      	ldr	r3, [pc, #16]	; (1a001bbc <timer1CompareMatch3func+0x14>)
1a001bac:	7c1b      	ldrb	r3, [r3, #16]
1a001bae:	2100      	movs	r1, #0
1a001bb0:	4a03      	ldr	r2, [pc, #12]	; (1a001bc0 <timer1CompareMatch3func+0x18>)
1a001bb2:	56d0      	ldrsb	r0, [r2, r3]
1a001bb4:	f7ff fd0a 	bl	1a0015cc <gpioWrite>
}
1a001bb8:	bd08      	pop	{r3, pc}
1a001bba:	bf00      	nop
1a001bbc:	10000088 	.word	0x10000088
1a001bc0:	1a002500 	.word	0x1a002500

1a001bc4 <timer2CompareMatch1func>:
      }
   }
}

void timer2CompareMatch1func( void* ptr )
{
1a001bc4:	b508      	push	{r3, lr}
   gpioWrite(servoMap[AttachedServoList[3].servo],FALSE);
1a001bc6:	4b04      	ldr	r3, [pc, #16]	; (1a001bd8 <timer2CompareMatch1func+0x14>)
1a001bc8:	7e1b      	ldrb	r3, [r3, #24]
1a001bca:	2100      	movs	r1, #0
1a001bcc:	4a03      	ldr	r2, [pc, #12]	; (1a001bdc <timer2CompareMatch1func+0x18>)
1a001bce:	56d0      	ldrsb	r0, [r2, r3]
1a001bd0:	f7ff fcfc 	bl	1a0015cc <gpioWrite>
}
1a001bd4:	bd08      	pop	{r3, pc}
1a001bd6:	bf00      	nop
1a001bd8:	10000088 	.word	0x10000088
1a001bdc:	1a002500 	.word	0x1a002500

1a001be0 <timer2CompareMatch2func>:

void timer2CompareMatch2func( void* ptr )
{
1a001be0:	b508      	push	{r3, lr}
   gpioWrite(servoMap[AttachedServoList[4].servo],FALSE);
1a001be2:	4b04      	ldr	r3, [pc, #16]	; (1a001bf4 <timer2CompareMatch2func+0x14>)
1a001be4:	f893 3020 	ldrb.w	r3, [r3, #32]
1a001be8:	2100      	movs	r1, #0
1a001bea:	4a03      	ldr	r2, [pc, #12]	; (1a001bf8 <timer2CompareMatch2func+0x18>)
1a001bec:	56d0      	ldrsb	r0, [r2, r3]
1a001bee:	f7ff fced 	bl	1a0015cc <gpioWrite>
}
1a001bf2:	bd08      	pop	{r3, pc}
1a001bf4:	10000088 	.word	0x10000088
1a001bf8:	1a002500 	.word	0x1a002500

1a001bfc <timer2CompareMatch3func>:

void timer2CompareMatch3func( void* ptr )
{
1a001bfc:	b508      	push	{r3, lr}
   gpioWrite(servoMap[AttachedServoList[5].servo],FALSE);
1a001bfe:	4b04      	ldr	r3, [pc, #16]	; (1a001c10 <timer2CompareMatch3func+0x14>)
1a001c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
1a001c04:	2100      	movs	r1, #0
1a001c06:	4a03      	ldr	r2, [pc, #12]	; (1a001c14 <timer2CompareMatch3func+0x18>)
1a001c08:	56d0      	ldrsb	r0, [r2, r3]
1a001c0a:	f7ff fcdf 	bl	1a0015cc <gpioWrite>
}
1a001c0e:	bd08      	pop	{r3, pc}
1a001c10:	10000088 	.word	0x10000088
1a001c14:	1a002500 	.word	0x1a002500

1a001c18 <timer3CompareMatch1func>:
      }
   }
}

void timer3CompareMatch1func( void* ptr )
{
1a001c18:	b508      	push	{r3, lr}
   gpioWrite( servoMap[AttachedServoList[6].servo], FALSE );
1a001c1a:	4b04      	ldr	r3, [pc, #16]	; (1a001c2c <timer3CompareMatch1func+0x14>)
1a001c1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
1a001c20:	2100      	movs	r1, #0
1a001c22:	4a03      	ldr	r2, [pc, #12]	; (1a001c30 <timer3CompareMatch1func+0x18>)
1a001c24:	56d0      	ldrsb	r0, [r2, r3]
1a001c26:	f7ff fcd1 	bl	1a0015cc <gpioWrite>
}
1a001c2a:	bd08      	pop	{r3, pc}
1a001c2c:	10000088 	.word	0x10000088
1a001c30:	1a002500 	.word	0x1a002500

1a001c34 <timer3CompareMatch2func>:

void timer3CompareMatch2func( void* ptr )
{
1a001c34:	b508      	push	{r3, lr}
   gpioWrite( servoMap[AttachedServoList[7].servo], FALSE );
1a001c36:	4b04      	ldr	r3, [pc, #16]	; (1a001c48 <timer3CompareMatch2func+0x14>)
1a001c38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
1a001c3c:	2100      	movs	r1, #0
1a001c3e:	4a03      	ldr	r2, [pc, #12]	; (1a001c4c <timer3CompareMatch2func+0x18>)
1a001c40:	56d0      	ldrsb	r0, [r2, r3]
1a001c42:	f7ff fcc3 	bl	1a0015cc <gpioWrite>
}
1a001c46:	bd08      	pop	{r3, pc}
1a001c48:	10000088 	.word	0x10000088
1a001c4c:	1a002500 	.word	0x1a002500

1a001c50 <timer3CompareMatch3func>:

void timer3CompareMatch3func( void* ptr )
{
1a001c50:	b508      	push	{r3, lr}
   gpioWrite( servoMap[AttachedServoList[8].servo], FALSE );
1a001c52:	4b04      	ldr	r3, [pc, #16]	; (1a001c64 <timer3CompareMatch3func+0x14>)
1a001c54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
1a001c58:	2100      	movs	r1, #0
1a001c5a:	4a03      	ldr	r2, [pc, #12]	; (1a001c68 <timer3CompareMatch3func+0x18>)
1a001c5c:	56d0      	ldrsb	r0, [r2, r3]
1a001c5e:	f7ff fcb5 	bl	1a0015cc <gpioWrite>
}
1a001c62:	bd08      	pop	{r3, pc}
1a001c64:	10000088 	.word	0x10000088
1a001c68:	1a002500 	.word	0x1a002500

1a001c6c <valueToMicroseconds>:
   return (SERVO_MINUPTIME_PERIOD+(value*SERVO_MAXUPTIME_PERIOD)/180);
1a001c6c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
1a001c70:	fb03 f000 	mul.w	r0, r3, r0
1a001c74:	4b03      	ldr	r3, [pc, #12]	; (1a001c84 <valueToMicroseconds+0x18>)
1a001c76:	fb83 2300 	smull	r2, r3, r3, r0
1a001c7a:	4418      	add	r0, r3
1a001c7c:	11c0      	asrs	r0, r0, #7
}
1a001c7e:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
1a001c82:	4770      	bx	lr
1a001c84:	b60b60b7 	.word	0xb60b60b7

1a001c88 <timer1CompareMatch0func>:
{
1a001c88:	b570      	push	{r4, r5, r6, lr}
   for(servoListPosition=0; servoListPosition<3; servoListPosition++) {
1a001c8a:	2400      	movs	r4, #0
1a001c8c:	e015      	b.n	1a001cba <timer1CompareMatch0func+0x32>
         gpioWrite(servoMap[AttachedServoList[servoListPosition].servo],TRUE);
1a001c8e:	2101      	movs	r1, #1
1a001c90:	4a0e      	ldr	r2, [pc, #56]	; (1a001ccc <timer1CompareMatch0func+0x44>)
1a001c92:	56d0      	ldrsb	r0, [r2, r3]
1a001c94:	f7ff fc9a 	bl	1a0015cc <gpioWrite>
         Timer_SetCompareMatch( 	AttachedServoList[servoListPosition].associatedTimer,
1a001c98:	4b0d      	ldr	r3, [pc, #52]	; (1a001cd0 <timer1CompareMatch0func+0x48>)
1a001c9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
1a001c9e:	789d      	ldrb	r5, [r3, #2]
1a001ca0:	78de      	ldrb	r6, [r3, #3]
1a001ca2:	7858      	ldrb	r0, [r3, #1]
1a001ca4:	f7ff ffe2 	bl	1a001c6c <valueToMicroseconds>
1a001ca8:	f7ff fd58 	bl	1a00175c <Timer_microsecondsToTicks>
1a001cac:	4602      	mov	r2, r0
1a001cae:	4631      	mov	r1, r6
1a001cb0:	4628      	mov	r0, r5
1a001cb2:	f7ff fd95 	bl	1a0017e0 <Timer_SetCompareMatch>
   for(servoListPosition=0; servoListPosition<3; servoListPosition++) {
1a001cb6:	3401      	adds	r4, #1
1a001cb8:	b2e4      	uxtb	r4, r4
1a001cba:	2c02      	cmp	r4, #2
1a001cbc:	d805      	bhi.n	1a001cca <timer1CompareMatch0func+0x42>
      if(AttachedServoList[servoListPosition].servo != EMPTY_POSITION) {
1a001cbe:	4b04      	ldr	r3, [pc, #16]	; (1a001cd0 <timer1CompareMatch0func+0x48>)
1a001cc0:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
1a001cc4:	2bff      	cmp	r3, #255	; 0xff
1a001cc6:	d0f6      	beq.n	1a001cb6 <timer1CompareMatch0func+0x2e>
1a001cc8:	e7e1      	b.n	1a001c8e <timer1CompareMatch0func+0x6>
}
1a001cca:	bd70      	pop	{r4, r5, r6, pc}
1a001ccc:	1a002500 	.word	0x1a002500
1a001cd0:	10000088 	.word	0x10000088

1a001cd4 <timer2CompareMatch0func>:
{
1a001cd4:	b570      	push	{r4, r5, r6, lr}
   for(servoListPosition=3; servoListPosition<6; servoListPosition++) {
1a001cd6:	2403      	movs	r4, #3
1a001cd8:	e015      	b.n	1a001d06 <timer2CompareMatch0func+0x32>
         gpioWrite(servoMap[AttachedServoList[servoListPosition].servo],TRUE);
1a001cda:	2101      	movs	r1, #1
1a001cdc:	4a0e      	ldr	r2, [pc, #56]	; (1a001d18 <timer2CompareMatch0func+0x44>)
1a001cde:	56d0      	ldrsb	r0, [r2, r3]
1a001ce0:	f7ff fc74 	bl	1a0015cc <gpioWrite>
         Timer_SetCompareMatch( AttachedServoList[servoListPosition].associatedTimer,
1a001ce4:	4b0d      	ldr	r3, [pc, #52]	; (1a001d1c <timer2CompareMatch0func+0x48>)
1a001ce6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
1a001cea:	789d      	ldrb	r5, [r3, #2]
1a001cec:	78de      	ldrb	r6, [r3, #3]
1a001cee:	7858      	ldrb	r0, [r3, #1]
1a001cf0:	f7ff ffbc 	bl	1a001c6c <valueToMicroseconds>
1a001cf4:	f7ff fd32 	bl	1a00175c <Timer_microsecondsToTicks>
1a001cf8:	4602      	mov	r2, r0
1a001cfa:	4631      	mov	r1, r6
1a001cfc:	4628      	mov	r0, r5
1a001cfe:	f7ff fd6f 	bl	1a0017e0 <Timer_SetCompareMatch>
   for(servoListPosition=3; servoListPosition<6; servoListPosition++) {
1a001d02:	3401      	adds	r4, #1
1a001d04:	b2e4      	uxtb	r4, r4
1a001d06:	2c05      	cmp	r4, #5
1a001d08:	d805      	bhi.n	1a001d16 <timer2CompareMatch0func+0x42>
      if(AttachedServoList[servoListPosition].servo != EMPTY_POSITION) {
1a001d0a:	4b04      	ldr	r3, [pc, #16]	; (1a001d1c <timer2CompareMatch0func+0x48>)
1a001d0c:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
1a001d10:	2bff      	cmp	r3, #255	; 0xff
1a001d12:	d0f6      	beq.n	1a001d02 <timer2CompareMatch0func+0x2e>
1a001d14:	e7e1      	b.n	1a001cda <timer2CompareMatch0func+0x6>
}
1a001d16:	bd70      	pop	{r4, r5, r6, pc}
1a001d18:	1a002500 	.word	0x1a002500
1a001d1c:	10000088 	.word	0x10000088

1a001d20 <timer3CompareMatch0func>:
{
1a001d20:	b570      	push	{r4, r5, r6, lr}
   for(servoListPosition=6; servoListPosition<9; servoListPosition++) {
1a001d22:	2406      	movs	r4, #6
1a001d24:	e015      	b.n	1a001d52 <timer3CompareMatch0func+0x32>
         gpioWrite(servoMap[AttachedServoList[servoListPosition].servo],TRUE);
1a001d26:	2101      	movs	r1, #1
1a001d28:	4a0e      	ldr	r2, [pc, #56]	; (1a001d64 <timer3CompareMatch0func+0x44>)
1a001d2a:	56d0      	ldrsb	r0, [r2, r3]
1a001d2c:	f7ff fc4e 	bl	1a0015cc <gpioWrite>
         Timer_SetCompareMatch( AttachedServoList[servoListPosition].associatedTimer,
1a001d30:	4b0d      	ldr	r3, [pc, #52]	; (1a001d68 <timer3CompareMatch0func+0x48>)
1a001d32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
1a001d36:	789d      	ldrb	r5, [r3, #2]
1a001d38:	78de      	ldrb	r6, [r3, #3]
1a001d3a:	7858      	ldrb	r0, [r3, #1]
1a001d3c:	f7ff ff96 	bl	1a001c6c <valueToMicroseconds>
1a001d40:	f7ff fd0c 	bl	1a00175c <Timer_microsecondsToTicks>
1a001d44:	4602      	mov	r2, r0
1a001d46:	4631      	mov	r1, r6
1a001d48:	4628      	mov	r0, r5
1a001d4a:	f7ff fd49 	bl	1a0017e0 <Timer_SetCompareMatch>
   for(servoListPosition=6; servoListPosition<9; servoListPosition++) {
1a001d4e:	3401      	adds	r4, #1
1a001d50:	b2e4      	uxtb	r4, r4
1a001d52:	2c08      	cmp	r4, #8
1a001d54:	d805      	bhi.n	1a001d62 <timer3CompareMatch0func+0x42>
      if(AttachedServoList[servoListPosition].servo != EMPTY_POSITION) {
1a001d56:	4b04      	ldr	r3, [pc, #16]	; (1a001d68 <timer3CompareMatch0func+0x48>)
1a001d58:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
1a001d5c:	2bff      	cmp	r3, #255	; 0xff
1a001d5e:	d0f6      	beq.n	1a001d4e <timer3CompareMatch0func+0x2e>
1a001d60:	e7e1      	b.n	1a001d26 <timer3CompareMatch0func+0x6>
}
1a001d62:	bd70      	pop	{r4, r5, r6, pc}
1a001d64:	1a002500 	.word	0x1a002500
1a001d68:	10000088 	.word	0x10000088

1a001d6c <servoInitTimers>:
 * @return   nothing
 * @IMPORTANT:   this function uses Timer 1, 2 and 3 to generate the servo signals, so
 *   they won't be available to use.
 */
void servoInitTimers(void)
{
1a001d6c:	b508      	push	{r3, lr}
   Timer_Init( TIMER1,
1a001d6e:	f644 6020 	movw	r0, #20000	; 0x4e20
1a001d72:	f7ff fcf3 	bl	1a00175c <Timer_microsecondsToTicks>
1a001d76:	4a0c      	ldr	r2, [pc, #48]	; (1a001da8 <servoInitTimers+0x3c>)
1a001d78:	4601      	mov	r1, r0
1a001d7a:	2001      	movs	r0, #1
1a001d7c:	f7ff fc5e 	bl	1a00163c <Timer_Init>
               Timer_microsecondsToTicks(SERVO_COMPLETECYCLE_PERIOD),
               timer1CompareMatch0func
             );
   Timer_Init( TIMER2,
1a001d80:	f644 6020 	movw	r0, #20000	; 0x4e20
1a001d84:	f7ff fcea 	bl	1a00175c <Timer_microsecondsToTicks>
1a001d88:	4a08      	ldr	r2, [pc, #32]	; (1a001dac <servoInitTimers+0x40>)
1a001d8a:	4601      	mov	r1, r0
1a001d8c:	2002      	movs	r0, #2
1a001d8e:	f7ff fc55 	bl	1a00163c <Timer_Init>
               Timer_microsecondsToTicks(SERVO_COMPLETECYCLE_PERIOD),
               timer2CompareMatch0func
             );
   Timer_Init( TIMER3,
1a001d92:	f644 6020 	movw	r0, #20000	; 0x4e20
1a001d96:	f7ff fce1 	bl	1a00175c <Timer_microsecondsToTicks>
1a001d9a:	4a05      	ldr	r2, [pc, #20]	; (1a001db0 <servoInitTimers+0x44>)
1a001d9c:	4601      	mov	r1, r0
1a001d9e:	2003      	movs	r0, #3
1a001da0:	f7ff fc4c 	bl	1a00163c <Timer_Init>
               Timer_microsecondsToTicks(SERVO_COMPLETECYCLE_PERIOD),
               timer3CompareMatch0func
             );
}
1a001da4:	bd08      	pop	{r3, pc}
1a001da6:	bf00      	nop
1a001da8:	1a001c89 	.word	0x1a001c89
1a001dac:	1a001cd5 	.word	0x1a001cd5
1a001db0:	1a001d21 	.word	0x1a001d21

1a001db4 <servoIsAttached>:
 * @param:   value:   value of the servo, from 0 to 180
 * @return:   position (1 ~ SERVO_TOTALNUMBER), 0 if the element was not found.
 */
uint8_t servoIsAttached( servoMap_t servoNumber )
{
   uint8_t position = 0, positionInList = 0;
1a001db4:	2300      	movs	r3, #0
   while ( (position < SERVO_TOTALNUMBER) &&
1a001db6:	2b08      	cmp	r3, #8
1a001db8:	d807      	bhi.n	1a001dca <servoIsAttached+0x16>
           (servoNumber != AttachedServoList[position].servo) ) {
1a001dba:	4a07      	ldr	r2, [pc, #28]	; (1a001dd8 <servoIsAttached+0x24>)
1a001dbc:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   while ( (position < SERVO_TOTALNUMBER) &&
1a001dc0:	4282      	cmp	r2, r0
1a001dc2:	d002      	beq.n	1a001dca <servoIsAttached+0x16>
      position++;
1a001dc4:	3301      	adds	r3, #1
1a001dc6:	b2db      	uxtb	r3, r3
1a001dc8:	e7f5      	b.n	1a001db6 <servoIsAttached+0x2>
   }

   if (position < SERVO_TOTALNUMBER) {
1a001dca:	2b08      	cmp	r3, #8
1a001dcc:	d802      	bhi.n	1a001dd4 <servoIsAttached+0x20>
      positionInList = position + 1;
1a001dce:	1c58      	adds	r0, r3, #1
1a001dd0:	b2c0      	uxtb	r0, r0
1a001dd2:	4770      	bx	lr
   } else {
      positionInList = 0;
1a001dd4:	2000      	movs	r0, #0
   }

   return positionInList;
}
1a001dd6:	4770      	bx	lr
1a001dd8:	10000088 	.word	0x10000088

1a001ddc <servoAttach>:
{
1a001ddc:	b570      	push	{r4, r5, r6, lr}
1a001dde:	4604      	mov	r4, r0
   gpioConfig( (gpioMap_t)servoMap[servoNumber], GPIO_OUTPUT );
1a001de0:	2101      	movs	r1, #1
1a001de2:	4b12      	ldr	r3, [pc, #72]	; (1a001e2c <servoAttach+0x50>)
1a001de4:	5618      	ldrsb	r0, [r3, r0]
1a001de6:	f7ff fb1b 	bl	1a001420 <gpioInit>
   position = servoIsAttached(servoNumber);
1a001dea:	4620      	mov	r0, r4
1a001dec:	f7ff ffe2 	bl	1a001db4 <servoIsAttached>
   if( position==0 ) {
1a001df0:	b9d0      	cbnz	r0, 1a001e28 <servoAttach+0x4c>
      position = servoIsAttached(EMPTY_POSITION); /* Searches for the first empty position */
1a001df2:	20ff      	movs	r0, #255	; 0xff
1a001df4:	f7ff ffde 	bl	1a001db4 <servoIsAttached>
      if(position) { /* if position==0 => there is no room in the list for another servo */
1a001df8:	b908      	cbnz	r0, 1a001dfe <servoAttach+0x22>
   bool_t success = FALSE;
1a001dfa:	2000      	movs	r0, #0
1a001dfc:	e015      	b.n	1a001e2a <servoAttach+0x4e>
         AttachedServoList[position-1].servo = servoNumber;
1a001dfe:	1e42      	subs	r2, r0, #1
1a001e00:	4b0b      	ldr	r3, [pc, #44]	; (1a001e30 <servoAttach+0x54>)
1a001e02:	f803 4032 	strb.w	r4, [r3, r2, lsl #3]
         Timer_EnableCompareMatch( AttachedServoList[position-1].associatedTimer,
1a001e06:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
1a001e0a:	78a5      	ldrb	r5, [r4, #2]
1a001e0c:	78e6      	ldrb	r6, [r4, #3]
1a001e0e:	7860      	ldrb	r0, [r4, #1]
1a001e10:	f7ff ff2c 	bl	1a001c6c <valueToMicroseconds>
1a001e14:	f7ff fca2 	bl	1a00175c <Timer_microsecondsToTicks>
1a001e18:	6863      	ldr	r3, [r4, #4]
1a001e1a:	4602      	mov	r2, r0
1a001e1c:	4631      	mov	r1, r6
1a001e1e:	4628      	mov	r0, r5
1a001e20:	f7ff fca0 	bl	1a001764 <Timer_EnableCompareMatch>
         success = TRUE;
1a001e24:	2001      	movs	r0, #1
1a001e26:	e000      	b.n	1a001e2a <servoAttach+0x4e>
   bool_t success = FALSE;
1a001e28:	2000      	movs	r0, #0
}
1a001e2a:	bd70      	pop	{r4, r5, r6, pc}
1a001e2c:	1a002500 	.word	0x1a002500
1a001e30:	10000088 	.word	0x10000088

1a001e34 <servoDetach>:
{
1a001e34:	b508      	push	{r3, lr}
   position = servoIsAttached(servoNumber);
1a001e36:	f7ff ffbd 	bl	1a001db4 <servoIsAttached>
   if(position) {
1a001e3a:	b908      	cbnz	r0, 1a001e40 <servoDetach+0xc>
   bool_t success = FALSE;
1a001e3c:	2000      	movs	r0, #0
}
1a001e3e:	bd08      	pop	{r3, pc}
      AttachedServoList[position-1].servo = EMPTY_POSITION;
1a001e40:	1e43      	subs	r3, r0, #1
1a001e42:	4a07      	ldr	r2, [pc, #28]	; (1a001e60 <servoDetach+0x2c>)
1a001e44:	21ff      	movs	r1, #255	; 0xff
1a001e46:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      AttachedServoList[position-1].value = 0;
1a001e4a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001e4e:	2200      	movs	r2, #0
1a001e50:	705a      	strb	r2, [r3, #1]
      Timer_DisableCompareMatch( AttachedServoList[position-1].associatedTimer,
1a001e52:	78d9      	ldrb	r1, [r3, #3]
1a001e54:	7898      	ldrb	r0, [r3, #2]
1a001e56:	f7ff fca1 	bl	1a00179c <Timer_DisableCompareMatch>
      success = TRUE;
1a001e5a:	2001      	movs	r0, #1
1a001e5c:	e7ef      	b.n	1a001e3e <servoDetach+0xa>
1a001e5e:	bf00      	nop
1a001e60:	10000088 	.word	0x10000088

1a001e64 <servoInit>:
{
1a001e64:	b508      	push	{r3, lr}
   switch(config) {
1a001e66:	2902      	cmp	r1, #2
1a001e68:	d008      	beq.n	1a001e7c <servoInit+0x18>
1a001e6a:	2903      	cmp	r1, #3
1a001e6c:	d009      	beq.n	1a001e82 <servoInit+0x1e>
1a001e6e:	b109      	cbz	r1, 1a001e74 <servoInit+0x10>
      ret_val = 0;
1a001e70:	2000      	movs	r0, #0
}
1a001e72:	bd08      	pop	{r3, pc}
      servoInitTimers();
1a001e74:	f7ff ff7a 	bl	1a001d6c <servoInitTimers>
   bool_t ret_val = 1;
1a001e78:	2001      	movs	r0, #1
      break;
1a001e7a:	e7fa      	b.n	1a001e72 <servoInit+0xe>
      ret_val = servoAttach( servoNumber );
1a001e7c:	f7ff ffae 	bl	1a001ddc <servoAttach>
      break;
1a001e80:	e7f7      	b.n	1a001e72 <servoInit+0xe>
      ret_val = servoDetach( servoNumber );
1a001e82:	f7ff ffd7 	bl	1a001e34 <servoDetach>
      break;
1a001e86:	e7f4      	b.n	1a001e72 <servoInit+0xe>

1a001e88 <servoRead>:
 * @param:   servoNumber:   ID of the servo, from 0 to 8
 * @return: value of the servo (0 ~ 180).
 *   If an error ocurred, return = EMPTY_POSITION = 255
 */
uint16_t servoRead( servoMap_t servoNumber )
{
1a001e88:	b508      	push	{r3, lr}
   uint8_t position = 0, value = 0;
   position = servoIsAttached(servoNumber);
1a001e8a:	f7ff ff93 	bl	1a001db4 <servoIsAttached>

   if(position) {
1a001e8e:	b128      	cbz	r0, 1a001e9c <servoRead+0x14>
      value = AttachedServoList[position-1].value;
1a001e90:	1e43      	subs	r3, r0, #1
1a001e92:	4a03      	ldr	r2, [pc, #12]	; (1a001ea0 <servoRead+0x18>)
1a001e94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001e98:	7858      	ldrb	r0, [r3, #1]
1a001e9a:	e000      	b.n	1a001e9e <servoRead+0x16>
   } else {
      value = EMPTY_POSITION;
1a001e9c:	20ff      	movs	r0, #255	; 0xff
   }
   return value;
}
1a001e9e:	bd08      	pop	{r3, pc}
1a001ea0:	10000088 	.word	0x10000088

1a001ea4 <servoWrite>:
 * @param:   servoNumber:   ID of the servo, from 0 to 8
 * @param:   value:   value of the servo, from 0 to 180
 * @return: True if the value was successfully changed, False if not.
 */
bool_t servoWrite( servoMap_t servoNumber, uint16_t angle )
{
1a001ea4:	b510      	push	{r4, lr}
1a001ea6:	460c      	mov	r4, r1
   bool_t success = FALSE;
   uint8_t position = 0;

   position = servoIsAttached(servoNumber);
1a001ea8:	f7ff ff84 	bl	1a001db4 <servoIsAttached>

   if(position && (angle>=0 && angle<=180)) {
1a001eac:	b140      	cbz	r0, 1a001ec0 <servoWrite+0x1c>
1a001eae:	2cb4      	cmp	r4, #180	; 0xb4
1a001eb0:	d808      	bhi.n	1a001ec4 <servoWrite+0x20>
      AttachedServoList[position-1].value = angle;
1a001eb2:	1e43      	subs	r3, r0, #1
1a001eb4:	4a04      	ldr	r2, [pc, #16]	; (1a001ec8 <servoWrite+0x24>)
1a001eb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a001eba:	705c      	strb	r4, [r3, #1]
      success = TRUE;
1a001ebc:	2001      	movs	r0, #1
1a001ebe:	e000      	b.n	1a001ec2 <servoWrite+0x1e>
   bool_t success = FALSE;
1a001ec0:	2000      	movs	r0, #0
   }

   return success;
}
1a001ec2:	bd10      	pop	{r4, pc}
   bool_t success = FALSE;
1a001ec4:	2000      	movs	r0, #0
1a001ec6:	e7fc      	b.n	1a001ec2 <servoWrite+0x1e>
1a001ec8:	10000088 	.word	0x10000088

1a001ecc <__aeabi_uldivmod>:
1a001ecc:	b953      	cbnz	r3, 1a001ee4 <__aeabi_uldivmod+0x18>
1a001ece:	b94a      	cbnz	r2, 1a001ee4 <__aeabi_uldivmod+0x18>
1a001ed0:	2900      	cmp	r1, #0
1a001ed2:	bf08      	it	eq
1a001ed4:	2800      	cmpeq	r0, #0
1a001ed6:	bf1c      	itt	ne
1a001ed8:	f04f 31ff 	movne.w	r1, #4294967295
1a001edc:	f04f 30ff 	movne.w	r0, #4294967295
1a001ee0:	f000 b974 	b.w	1a0021cc <__aeabi_idiv0>
1a001ee4:	f1ad 0c08 	sub.w	ip, sp, #8
1a001ee8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001eec:	f000 f806 	bl	1a001efc <__udivmoddi4>
1a001ef0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001ef4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001ef8:	b004      	add	sp, #16
1a001efa:	4770      	bx	lr

1a001efc <__udivmoddi4>:
1a001efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001f00:	9e08      	ldr	r6, [sp, #32]
1a001f02:	4604      	mov	r4, r0
1a001f04:	4688      	mov	r8, r1
1a001f06:	2b00      	cmp	r3, #0
1a001f08:	f040 8085 	bne.w	1a002016 <__udivmoddi4+0x11a>
1a001f0c:	428a      	cmp	r2, r1
1a001f0e:	4615      	mov	r5, r2
1a001f10:	d948      	bls.n	1a001fa4 <__udivmoddi4+0xa8>
1a001f12:	fab2 f282 	clz	r2, r2
1a001f16:	b14a      	cbz	r2, 1a001f2c <__udivmoddi4+0x30>
1a001f18:	f1c2 0720 	rsb	r7, r2, #32
1a001f1c:	fa01 f302 	lsl.w	r3, r1, r2
1a001f20:	fa20 f707 	lsr.w	r7, r0, r7
1a001f24:	4095      	lsls	r5, r2
1a001f26:	ea47 0803 	orr.w	r8, r7, r3
1a001f2a:	4094      	lsls	r4, r2
1a001f2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001f30:	0c23      	lsrs	r3, r4, #16
1a001f32:	fbb8 f7fe 	udiv	r7, r8, lr
1a001f36:	fa1f fc85 	uxth.w	ip, r5
1a001f3a:	fb0e 8817 	mls	r8, lr, r7, r8
1a001f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001f42:	fb07 f10c 	mul.w	r1, r7, ip
1a001f46:	4299      	cmp	r1, r3
1a001f48:	d909      	bls.n	1a001f5e <__udivmoddi4+0x62>
1a001f4a:	18eb      	adds	r3, r5, r3
1a001f4c:	f107 30ff 	add.w	r0, r7, #4294967295
1a001f50:	f080 80e3 	bcs.w	1a00211a <__udivmoddi4+0x21e>
1a001f54:	4299      	cmp	r1, r3
1a001f56:	f240 80e0 	bls.w	1a00211a <__udivmoddi4+0x21e>
1a001f5a:	3f02      	subs	r7, #2
1a001f5c:	442b      	add	r3, r5
1a001f5e:	1a5b      	subs	r3, r3, r1
1a001f60:	b2a4      	uxth	r4, r4
1a001f62:	fbb3 f0fe 	udiv	r0, r3, lr
1a001f66:	fb0e 3310 	mls	r3, lr, r0, r3
1a001f6a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001f6e:	fb00 fc0c 	mul.w	ip, r0, ip
1a001f72:	45a4      	cmp	ip, r4
1a001f74:	d909      	bls.n	1a001f8a <__udivmoddi4+0x8e>
1a001f76:	192c      	adds	r4, r5, r4
1a001f78:	f100 33ff 	add.w	r3, r0, #4294967295
1a001f7c:	f080 80cb 	bcs.w	1a002116 <__udivmoddi4+0x21a>
1a001f80:	45a4      	cmp	ip, r4
1a001f82:	f240 80c8 	bls.w	1a002116 <__udivmoddi4+0x21a>
1a001f86:	3802      	subs	r0, #2
1a001f88:	442c      	add	r4, r5
1a001f8a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a001f8e:	eba4 040c 	sub.w	r4, r4, ip
1a001f92:	2700      	movs	r7, #0
1a001f94:	b11e      	cbz	r6, 1a001f9e <__udivmoddi4+0xa2>
1a001f96:	40d4      	lsrs	r4, r2
1a001f98:	2300      	movs	r3, #0
1a001f9a:	e9c6 4300 	strd	r4, r3, [r6]
1a001f9e:	4639      	mov	r1, r7
1a001fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001fa4:	2a00      	cmp	r2, #0
1a001fa6:	d053      	beq.n	1a002050 <__udivmoddi4+0x154>
1a001fa8:	fab2 f282 	clz	r2, r2
1a001fac:	2a00      	cmp	r2, #0
1a001fae:	f040 80b6 	bne.w	1a00211e <__udivmoddi4+0x222>
1a001fb2:	1b49      	subs	r1, r1, r5
1a001fb4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001fb8:	fa1f f885 	uxth.w	r8, r5
1a001fbc:	2701      	movs	r7, #1
1a001fbe:	fbb1 fcfe 	udiv	ip, r1, lr
1a001fc2:	0c23      	lsrs	r3, r4, #16
1a001fc4:	fb0e 111c 	mls	r1, lr, ip, r1
1a001fc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001fcc:	fb08 f10c 	mul.w	r1, r8, ip
1a001fd0:	4299      	cmp	r1, r3
1a001fd2:	d907      	bls.n	1a001fe4 <__udivmoddi4+0xe8>
1a001fd4:	18eb      	adds	r3, r5, r3
1a001fd6:	f10c 30ff 	add.w	r0, ip, #4294967295
1a001fda:	d202      	bcs.n	1a001fe2 <__udivmoddi4+0xe6>
1a001fdc:	4299      	cmp	r1, r3
1a001fde:	f200 80ec 	bhi.w	1a0021ba <__udivmoddi4+0x2be>
1a001fe2:	4684      	mov	ip, r0
1a001fe4:	1a59      	subs	r1, r3, r1
1a001fe6:	b2a3      	uxth	r3, r4
1a001fe8:	fbb1 f0fe 	udiv	r0, r1, lr
1a001fec:	fb0e 1410 	mls	r4, lr, r0, r1
1a001ff0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001ff4:	fb08 f800 	mul.w	r8, r8, r0
1a001ff8:	45a0      	cmp	r8, r4
1a001ffa:	d907      	bls.n	1a00200c <__udivmoddi4+0x110>
1a001ffc:	192c      	adds	r4, r5, r4
1a001ffe:	f100 33ff 	add.w	r3, r0, #4294967295
1a002002:	d202      	bcs.n	1a00200a <__udivmoddi4+0x10e>
1a002004:	45a0      	cmp	r8, r4
1a002006:	f200 80dc 	bhi.w	1a0021c2 <__udivmoddi4+0x2c6>
1a00200a:	4618      	mov	r0, r3
1a00200c:	eba4 0408 	sub.w	r4, r4, r8
1a002010:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a002014:	e7be      	b.n	1a001f94 <__udivmoddi4+0x98>
1a002016:	428b      	cmp	r3, r1
1a002018:	d908      	bls.n	1a00202c <__udivmoddi4+0x130>
1a00201a:	2e00      	cmp	r6, #0
1a00201c:	d078      	beq.n	1a002110 <__udivmoddi4+0x214>
1a00201e:	2700      	movs	r7, #0
1a002020:	e9c6 0100 	strd	r0, r1, [r6]
1a002024:	4638      	mov	r0, r7
1a002026:	4639      	mov	r1, r7
1a002028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00202c:	fab3 f783 	clz	r7, r3
1a002030:	b97f      	cbnz	r7, 1a002052 <__udivmoddi4+0x156>
1a002032:	428b      	cmp	r3, r1
1a002034:	d302      	bcc.n	1a00203c <__udivmoddi4+0x140>
1a002036:	4282      	cmp	r2, r0
1a002038:	f200 80bd 	bhi.w	1a0021b6 <__udivmoddi4+0x2ba>
1a00203c:	1a84      	subs	r4, r0, r2
1a00203e:	eb61 0303 	sbc.w	r3, r1, r3
1a002042:	2001      	movs	r0, #1
1a002044:	4698      	mov	r8, r3
1a002046:	2e00      	cmp	r6, #0
1a002048:	d0a9      	beq.n	1a001f9e <__udivmoddi4+0xa2>
1a00204a:	e9c6 4800 	strd	r4, r8, [r6]
1a00204e:	e7a6      	b.n	1a001f9e <__udivmoddi4+0xa2>
1a002050:	deff      	udf	#255	; 0xff
1a002052:	f1c7 0520 	rsb	r5, r7, #32
1a002056:	40bb      	lsls	r3, r7
1a002058:	fa22 fc05 	lsr.w	ip, r2, r5
1a00205c:	ea4c 0c03 	orr.w	ip, ip, r3
1a002060:	fa01 f407 	lsl.w	r4, r1, r7
1a002064:	fa20 f805 	lsr.w	r8, r0, r5
1a002068:	fa21 f305 	lsr.w	r3, r1, r5
1a00206c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a002070:	ea48 0404 	orr.w	r4, r8, r4
1a002074:	fbb3 f9fe 	udiv	r9, r3, lr
1a002078:	0c21      	lsrs	r1, r4, #16
1a00207a:	fb0e 3319 	mls	r3, lr, r9, r3
1a00207e:	fa1f f88c 	uxth.w	r8, ip
1a002082:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a002086:	fb09 fa08 	mul.w	sl, r9, r8
1a00208a:	459a      	cmp	sl, r3
1a00208c:	fa02 f207 	lsl.w	r2, r2, r7
1a002090:	fa00 f107 	lsl.w	r1, r0, r7
1a002094:	d90b      	bls.n	1a0020ae <__udivmoddi4+0x1b2>
1a002096:	eb1c 0303 	adds.w	r3, ip, r3
1a00209a:	f109 30ff 	add.w	r0, r9, #4294967295
1a00209e:	f080 8088 	bcs.w	1a0021b2 <__udivmoddi4+0x2b6>
1a0020a2:	459a      	cmp	sl, r3
1a0020a4:	f240 8085 	bls.w	1a0021b2 <__udivmoddi4+0x2b6>
1a0020a8:	f1a9 0902 	sub.w	r9, r9, #2
1a0020ac:	4463      	add	r3, ip
1a0020ae:	eba3 030a 	sub.w	r3, r3, sl
1a0020b2:	b2a4      	uxth	r4, r4
1a0020b4:	fbb3 f0fe 	udiv	r0, r3, lr
1a0020b8:	fb0e 3310 	mls	r3, lr, r0, r3
1a0020bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0020c0:	fb00 f808 	mul.w	r8, r0, r8
1a0020c4:	45a0      	cmp	r8, r4
1a0020c6:	d908      	bls.n	1a0020da <__udivmoddi4+0x1de>
1a0020c8:	eb1c 0404 	adds.w	r4, ip, r4
1a0020cc:	f100 33ff 	add.w	r3, r0, #4294967295
1a0020d0:	d26b      	bcs.n	1a0021aa <__udivmoddi4+0x2ae>
1a0020d2:	45a0      	cmp	r8, r4
1a0020d4:	d969      	bls.n	1a0021aa <__udivmoddi4+0x2ae>
1a0020d6:	3802      	subs	r0, #2
1a0020d8:	4464      	add	r4, ip
1a0020da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a0020de:	eba4 0408 	sub.w	r4, r4, r8
1a0020e2:	fba0 8902 	umull	r8, r9, r0, r2
1a0020e6:	454c      	cmp	r4, r9
1a0020e8:	46c6      	mov	lr, r8
1a0020ea:	464b      	mov	r3, r9
1a0020ec:	d354      	bcc.n	1a002198 <__udivmoddi4+0x29c>
1a0020ee:	d051      	beq.n	1a002194 <__udivmoddi4+0x298>
1a0020f0:	2e00      	cmp	r6, #0
1a0020f2:	d069      	beq.n	1a0021c8 <__udivmoddi4+0x2cc>
1a0020f4:	ebb1 020e 	subs.w	r2, r1, lr
1a0020f8:	eb64 0403 	sbc.w	r4, r4, r3
1a0020fc:	fa04 f505 	lsl.w	r5, r4, r5
1a002100:	fa22 f307 	lsr.w	r3, r2, r7
1a002104:	40fc      	lsrs	r4, r7
1a002106:	431d      	orrs	r5, r3
1a002108:	e9c6 5400 	strd	r5, r4, [r6]
1a00210c:	2700      	movs	r7, #0
1a00210e:	e746      	b.n	1a001f9e <__udivmoddi4+0xa2>
1a002110:	4637      	mov	r7, r6
1a002112:	4630      	mov	r0, r6
1a002114:	e743      	b.n	1a001f9e <__udivmoddi4+0xa2>
1a002116:	4618      	mov	r0, r3
1a002118:	e737      	b.n	1a001f8a <__udivmoddi4+0x8e>
1a00211a:	4607      	mov	r7, r0
1a00211c:	e71f      	b.n	1a001f5e <__udivmoddi4+0x62>
1a00211e:	f1c2 0320 	rsb	r3, r2, #32
1a002122:	fa20 f703 	lsr.w	r7, r0, r3
1a002126:	4095      	lsls	r5, r2
1a002128:	fa01 f002 	lsl.w	r0, r1, r2
1a00212c:	fa21 f303 	lsr.w	r3, r1, r3
1a002130:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002134:	4338      	orrs	r0, r7
1a002136:	0c01      	lsrs	r1, r0, #16
1a002138:	fbb3 f7fe 	udiv	r7, r3, lr
1a00213c:	fa1f f885 	uxth.w	r8, r5
1a002140:	fb0e 3317 	mls	r3, lr, r7, r3
1a002144:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002148:	fb07 f308 	mul.w	r3, r7, r8
1a00214c:	428b      	cmp	r3, r1
1a00214e:	fa04 f402 	lsl.w	r4, r4, r2
1a002152:	d907      	bls.n	1a002164 <__udivmoddi4+0x268>
1a002154:	1869      	adds	r1, r5, r1
1a002156:	f107 3cff 	add.w	ip, r7, #4294967295
1a00215a:	d228      	bcs.n	1a0021ae <__udivmoddi4+0x2b2>
1a00215c:	428b      	cmp	r3, r1
1a00215e:	d926      	bls.n	1a0021ae <__udivmoddi4+0x2b2>
1a002160:	3f02      	subs	r7, #2
1a002162:	4429      	add	r1, r5
1a002164:	1acb      	subs	r3, r1, r3
1a002166:	b281      	uxth	r1, r0
1a002168:	fbb3 f0fe 	udiv	r0, r3, lr
1a00216c:	fb0e 3310 	mls	r3, lr, r0, r3
1a002170:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a002174:	fb00 f308 	mul.w	r3, r0, r8
1a002178:	428b      	cmp	r3, r1
1a00217a:	d907      	bls.n	1a00218c <__udivmoddi4+0x290>
1a00217c:	1869      	adds	r1, r5, r1
1a00217e:	f100 3cff 	add.w	ip, r0, #4294967295
1a002182:	d210      	bcs.n	1a0021a6 <__udivmoddi4+0x2aa>
1a002184:	428b      	cmp	r3, r1
1a002186:	d90e      	bls.n	1a0021a6 <__udivmoddi4+0x2aa>
1a002188:	3802      	subs	r0, #2
1a00218a:	4429      	add	r1, r5
1a00218c:	1ac9      	subs	r1, r1, r3
1a00218e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a002192:	e714      	b.n	1a001fbe <__udivmoddi4+0xc2>
1a002194:	4541      	cmp	r1, r8
1a002196:	d2ab      	bcs.n	1a0020f0 <__udivmoddi4+0x1f4>
1a002198:	ebb8 0e02 	subs.w	lr, r8, r2
1a00219c:	eb69 020c 	sbc.w	r2, r9, ip
1a0021a0:	3801      	subs	r0, #1
1a0021a2:	4613      	mov	r3, r2
1a0021a4:	e7a4      	b.n	1a0020f0 <__udivmoddi4+0x1f4>
1a0021a6:	4660      	mov	r0, ip
1a0021a8:	e7f0      	b.n	1a00218c <__udivmoddi4+0x290>
1a0021aa:	4618      	mov	r0, r3
1a0021ac:	e795      	b.n	1a0020da <__udivmoddi4+0x1de>
1a0021ae:	4667      	mov	r7, ip
1a0021b0:	e7d8      	b.n	1a002164 <__udivmoddi4+0x268>
1a0021b2:	4681      	mov	r9, r0
1a0021b4:	e77b      	b.n	1a0020ae <__udivmoddi4+0x1b2>
1a0021b6:	4638      	mov	r0, r7
1a0021b8:	e745      	b.n	1a002046 <__udivmoddi4+0x14a>
1a0021ba:	f1ac 0c02 	sub.w	ip, ip, #2
1a0021be:	442b      	add	r3, r5
1a0021c0:	e710      	b.n	1a001fe4 <__udivmoddi4+0xe8>
1a0021c2:	3802      	subs	r0, #2
1a0021c4:	442c      	add	r4, r5
1a0021c6:	e721      	b.n	1a00200c <__udivmoddi4+0x110>
1a0021c8:	4637      	mov	r7, r6
1a0021ca:	e6e8      	b.n	1a001f9e <__udivmoddi4+0xa2>

1a0021cc <__aeabi_idiv0>:
1a0021cc:	4770      	bx	lr
1a0021ce:	bf00      	nop

1a0021d0 <__libc_init_array>:
1a0021d0:	b570      	push	{r4, r5, r6, lr}
1a0021d2:	4d0d      	ldr	r5, [pc, #52]	; (1a002208 <__libc_init_array+0x38>)
1a0021d4:	4c0d      	ldr	r4, [pc, #52]	; (1a00220c <__libc_init_array+0x3c>)
1a0021d6:	1b64      	subs	r4, r4, r5
1a0021d8:	10a4      	asrs	r4, r4, #2
1a0021da:	2600      	movs	r6, #0
1a0021dc:	42a6      	cmp	r6, r4
1a0021de:	d109      	bne.n	1a0021f4 <__libc_init_array+0x24>
1a0021e0:	4d0b      	ldr	r5, [pc, #44]	; (1a002210 <__libc_init_array+0x40>)
1a0021e2:	4c0c      	ldr	r4, [pc, #48]	; (1a002214 <__libc_init_array+0x44>)
1a0021e4:	f7fe fa59 	bl	1a00069a <_init>
1a0021e8:	1b64      	subs	r4, r4, r5
1a0021ea:	10a4      	asrs	r4, r4, #2
1a0021ec:	2600      	movs	r6, #0
1a0021ee:	42a6      	cmp	r6, r4
1a0021f0:	d105      	bne.n	1a0021fe <__libc_init_array+0x2e>
1a0021f2:	bd70      	pop	{r4, r5, r6, pc}
1a0021f4:	f855 3b04 	ldr.w	r3, [r5], #4
1a0021f8:	4798      	blx	r3
1a0021fa:	3601      	adds	r6, #1
1a0021fc:	e7ee      	b.n	1a0021dc <__libc_init_array+0xc>
1a0021fe:	f855 3b04 	ldr.w	r3, [r5], #4
1a002202:	4798      	blx	r3
1a002204:	3601      	adds	r6, #1
1a002206:	e7f2      	b.n	1a0021ee <__libc_init_array+0x1e>
1a002208:	1a00250c 	.word	0x1a00250c
1a00220c:	1a00250c 	.word	0x1a00250c
1a002210:	1a00250c 	.word	0x1a00250c
1a002214:	1a002510 	.word	0x1a002510

1a002218 <memset>:
1a002218:	4402      	add	r2, r0
1a00221a:	4603      	mov	r3, r0
1a00221c:	4293      	cmp	r3, r2
1a00221e:	d100      	bne.n	1a002222 <memset+0xa>
1a002220:	4770      	bx	lr
1a002222:	f803 1b01 	strb.w	r1, [r3], #1
1a002226:	e7f9      	b.n	1a00221c <memset+0x4>

1a002228 <InitClkStates>:
1a002228:	0f01 0101                                   ....

1a00222c <pinmuxing>:
1a00222c:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a00223c:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a00224c:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a00225c:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a00226c:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a00227c:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a00228c:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a00229c:	0206 0057                                   ..W.

1a0022a0 <ExtRateIn>:
1a0022a0:	0000 0000                                   ....

1a0022a4 <GpioButtons>:
1a0022a4:	0400 0800 0900 0901                         ........

1a0022ac <GpioLeds>:
1a0022ac:	0005 0105 0205 0e00 0b01 0c01               ............

1a0022b8 <GpioPorts>:
1a0022b8:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a0022c8:	0802 ffff                                   ....

1a0022cc <OscRateIn>:
1a0022cc:	1b00 00b7                                   ....

1a0022d0 <InitClkStates>:
1a0022d0:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a0022e0:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a0022f0:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a002300:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a002310:	111a 0001 111b 0001 0201 0804 0f03 0f0f     ................
1a002320:	00ff 0000                                   ....

1a002324 <periph_to_base>:
1a002324:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a002334:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a002344:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a002354:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a002364:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a002374:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a002384:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a002390 <UART_BClock>:
1a002390:	01c2 01a2 0182 0162                         ......b.

1a002398 <UART_PClock>:
1a002398:	0081 0082 00a1 00a2                         ........

1a0023a0 <gpioPinsInit>:
1a0023a0:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a0023b0:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a0023c0:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a0023d0:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a0023e0:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a0023f0:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a002400:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a002410:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a002420:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a002430:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a002440:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a002450:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a002460:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a002470:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a002480:	020b 000c 0c01 ffff                         ........

1a002488 <timer_sd>:
1a002488:	4000 4008 0020 0000 000c 0000 5000 4008     .@.@ ........P.@
1a002498:	0021 0000 000d 0000 3000 400c 0022 0000     !........0.@"...
1a0024a8:	000e 0000 4000 400c 0023 0000 000f 0000     .....@.@#.......

1a0024b8 <lpcUarts>:
1a0024b8:	1000 4008 0406 0602 0205 0018 1000 4008     ...@...........@
1a0024c8:	0509 0907 0706 0018 2000 4008 0000 0000     ......... .@....
1a0024d8:	0000 0019 1000 400c 0107 0706 0602 001a     .......@........
1a0024e8:	1000 400c 0f01 0101 0110 001a 2000 400c     ...@......... .@
1a0024f8:	0302 0202 0204 001b                         ........

1a002500 <servoMap>:
1a002500:	0200 0403 100b 1211 ff1f ffff               ............
